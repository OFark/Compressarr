@using Compressarr.FFmpegFactory;
@using Compressarr.Filtering;
@using Compressarr.JobProcessing;
@using Compressarr.Pages.Services;
@using Compressarr.Helpers;

@inject IFFmpegManager fFmpegManager
@inject IFilterManager filterManager
@inject IJobManager jobManager
@inject ILayoutService layoutService


<MudExpansionPanel Class="job">
    <TitleContent>
        <MudAvatar Image="@FilterImageSrc" />
        <MudText>@(NewJob ? "New Job" : $"{@job.FilterName} | {@job.PresetName} - {@job.BaseFolder} {@job.WriteFolder}")</MudText>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="@Typo.h6">@(editing ? "Settings" : "Workload")</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (!NewJob)
                            {
                                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" @onclick="() => { editJob = !editJob; }" />
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (editing)
                        {
                            <MudForm>
                                <MudSelect T="string" Required="true" Label="Filter" @bind-Value="job.FilterName">
                                    @foreach (var c in filterManager.Filters)
                                    {
                                        <MudSelectItem Value="@c.Name">@c.Name - @c.MediaSource</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudSelect T="string" Required="true" Label="Preset" @bind-Value="job.PresetName">
                                    @foreach (var c in fFmpegManager.Presets)
                                    {
                                        <MudSelectItem Value="@c.Name">@c.Name</MudSelectItem>
                                    }
                                </MudSelect>
                                <DirectoryLookup @bind-Folder="@job.BaseFolder" Label="Base Folder" />

                                <DirectoryLookup @bind-Folder="@job.DestinationFolder" Label="Destination Folder" Required="true" />

                                <MudCheckBox @bind-Checked="job.AutoImport" Label="Auto Import"></MudCheckBox>

                                @if (job.AutoImport)
                                {
                                    <MudNumericField Style="" @bind-Value="minSSIM" Label="Minimum SSIM" Min="0" Max="100" Adornment="Adornment.End" AdornmentText="%" />
                                    <MudNumericField @bind-Value="maxComp" Label="Maximum Compression" Min="0" Max="100" Adornment="Adornment.End" AdornmentText="%" />
                                }
                            </MudForm>
                        }
                        else
                        {
                            @if (job.WorkLoad != null)
                            {
                                <MudTable Items="job.WorkLoad" Striped="true" Dense="true">
                                    <HeaderContent>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Percent</MudTh>
                                        <MudTh>Frame</MudTh>
                                        <MudTh>FPS</MudTh>
                                        <MudTh>Q</MudTh>
                                        <MudTh>Size</MudTh>
                                        <MudTh>Time</MudTh>
                                        <MudTh>Length</MudTh>
                                        <MudTh>Bitrate</MudTh>
                                        <MudTh>Speed</MudTh>
                                        <MudTh>Finished</MudTh>
                                        <MudTh>SSIM</MudTh>
                                        <MudTh>Compression</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Name">@context.SourceFileName</MudTd>
                                        <MudTd DataLabel="Percent"><MudText Align="Align.Center">@context.Percent.Adorn("%")</MudText></MudTd>
                                        <MudTd DataLabel="Frame"><MudText Align="Align.Center">@context.Frame</MudText></MudTd>
                                        <MudTd DataLabel="FPS"><MudText Align="Align.Center">@context.FPS</MudText></MudTd>
                                        <MudTd DataLabel="Q"><MudText Align="Align.Center">@context.Q</MudText></MudTd>
                                        <MudTd DataLabel="Size"><MudText Align="Align.Center">@context.Size</MudText></MudTd>
                                        <MudTd DataLabel="Time"><MudText Align="Align.Center">@context.Duration</MudText></MudTd>
                                        <MudTd DataLabel="Length"><MudText Align="Align.Center">@context.TotalLength</MudText></MudTd>
                                        <MudTd DataLabel="Bitrate"><MudText Align="Align.Center">@context.Bitrate</MudText></MudTd>
                                        <MudTd DataLabel="Speed"><MudText Align="Align.Center">@context.Speed</MudText></MudTd>
                                        <MudTd DataLabel="Finished">
                                            <MudText Align="Align.Center">
                                                @if (context.Finished)
                                                        {
                                                            if (context.Success)
                                                            {
                                                        <MudIcon Color="Color.Success" Icon="@Icons.Material.Outlined.Check" />
                                                            }
                                                            else
                                                            {
                                                        <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.Error" />
                                                            }
                                                        }
                                            </MudText>
                                        </MudTd>
                                        <MudTd DataLabel="SSIM"><MudText Align="Align.Center">@context.SSIM.Adorn("%")</MudText></MudTd>
                                        <MudTd DataLabel="Compression"><MudText Align="Align.Center">@context.Compression.Adorn("%")</MudText></MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[]{5, 10, 50, 100}" />
                                    </PagerContent>
                                </MudTable>
                            }
                        }
                    </MudCardContent>
                    <MudCardActions>
                        @if (editing)
                        {
                            <MudButton @onclick="saveJob" Disabled="@(!saveEnabled)" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Save">Save</MudButton>
                            @if (!NewJob)
                            {
                                <MudButton @onclick="deleteJob" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete">Delete</MudButton>
                                @if (canReload)
                                {
                                    <MudButton StartIcon="@Icons.Material.Outlined.Refresh" Color="Color.Secondary" @onclick="reloadJob">Reload</MudButton>
                                }
                            }
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="@Typo.h6">Log</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (!NewJob)
                            {
                                if (job.JobState != JobState.Running)
                                {
                                    <MudIconButton Icon="@Icons.Material.Outlined.Sync" @onclick="reInitialise" title="Re-Initialise" />
                                }

                            }
                        </CardHeaderActions>
                    </MudCardHeader>

                    <MudCardContent class="jobEventsScrollWrapper">
                        <MudPaper Class="mud-theme-dark pa-2 jobEvents">
                            @foreach (var e in job.Events)
                            {
                                <MudText Class="event" Color="e.Color" Typo="Typo.body2">@e.Date.ToString("HH:mm:ss") - @e.Message</MudText>
                            }
                        </MudPaper>
                    </MudCardContent>
                    <MudCardActions>
                        @if (!NewJob)
                        {
                            <MudButton Variant="Variant.Filled" FullWidth="true" Color="@buttonColour" @onclick="startJob" @onmouseover="() => { mouseOnButton = true; }" @onmouseout="() => { mouseOnButton = false; }">@buttonText</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public Compressarr.JobProcessing.Models.Job job { get; set; }

    [Parameter]
    public bool NewJob { get; set; }

    [Parameter]
    public EventCallback OnAdd { get; set; }


    private bool canReload, editJob, mouseOnButton;

    private bool editing => editJob || NewJob;

    private bool saveEnabled => (editing || NewJob) && job?.FilterName != null && job?.PresetName != null && job?.DestinationFolder != null;

    private string FilterImageSrc => $"https://raw.githubusercontent.com/{FilterType}/{FilterType}.github.io/master/logo/{FilterType}.svg";

    private string FilterType => job?.Filter?.MediaSource == Filtering.MediaSource.Radarr ? "radarr" : "sonarr" ?? "";

    private int? minSSIM
    {
        get
        {
            return job.MinSSIM.HasValue ? (int)(job.MinSSIM * 100) : null;
        }
        set
        {
            if (value.HasValue)
            {
                job.MinSSIM = (decimal)value / 100;
            }
            else
            {
                job.MinSSIM = null;
            }
        }
    }

    private int? maxComp
    {
        get
        {
            return job.MaxCompression.HasValue ? (int)(job.MaxCompression * 100) : null;
        }
        set
        {
            if (value.HasValue)
            {
                job.MaxCompression = (decimal)value / 100;
            }
            else
            {
                job.MaxCompression = null;
            }
        }
    }

    private string buttonText
    {
        get
        {
            switch (job.JobState)
            {
                case JobState.Added:
                    return "Initialising";
                case JobState.Running:
                    return mouseOnButton ? "Stop" : "Running";
                case JobState.Finished:
                    return mouseOnButton ? "Re-Initialise" : "Finished";
                case JobState.TestedFail:
                    return mouseOnButton ? "Re-Initialise" : "Test Failed";
                case JobState.TestedOK:
                    return mouseOnButton ? "GO!" : "Ready";
                case JobState.Waiting:
                    return mouseOnButton ? "Stop" : "Waiting";
            }

            return "";
        }
    }

    private Color buttonColour
    {
        get
        {
            switch (job.JobState)
            {
                case JobState.Added:
                case JobState.Running:
                case JobState.TestedFail:
                    return Color.Warning;

            }

            return Color.Primary;
        }
    }

    private bool running => job.JobState == JobState.Running;

    protected override void OnInitialized()
    {
        job.StatusUpdate += jobStatusUpdate;
    }

    private void jobStatusUpdate(object caller, EventArgs args)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async void reInitialise()
    {
        await jobManager.InitialiseJob(job, true);
    }

    private void reloadJob()
    {
        using (layoutService.Working("Reloading..."))
        {
            job = jobManager.ReloadJob(job);
            canReload = false;
            StateHasChanged();
        }
    }

    private async void saveJob()
    {
        using (layoutService.Working("Saving..."))
        {

            var success = await jobManager.AddJob(job);
            editJob = !success;
            canReload = !success && !NewJob;

            if (success && NewJob)
            {
                if (OnAdd.HasDelegate)
                {
                    await OnAdd.InvokeAsync();
                }
            }

            StateHasChanged();
        }
    }

    private async void deleteJob()
    {
        using (layoutService.Working("Deleting..."))
        {
            await jobManager.DeleteJob(job);
            StateHasChanged();
        }
    }

    private void startJob()
    {
        switch (job.JobState)
        {
            case JobState.TestedOK:
                {
                    jobManager.RunJob(job);
                }
                break;
            case JobState.TestedFail:
            case JobState.Finished:
                {
                    jobManager.InitialiseJob(job, true);
                }
                break;
            case JobState.Running:
            case JobState.Waiting:
                {
                    jobManager.CancelJob(job);
                }
                break;
        }
    }
}
