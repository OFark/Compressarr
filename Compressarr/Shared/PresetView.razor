@inject IApplicationService ApplicationService
@inject IPresetManager PresetManager
@inject IDialogService DialogService
@inject ILayoutService LayoutService
@inject IJobManager JobManager

<MudExpansionPanel Class="job">
    <TitleContent>
        <MudText>
            @if (NewPreset)
            {
                <MudAvatar Color="Color.Dark" Class="mr-3" Style="vertical-align: middle;">
                    <MudIcon Icon="@Icons.Outlined.PlaylistAdd" />
                </MudAvatar>
                @:New Preset
            }
            else
            {
                <MudAvatar Rounded="true" Image="https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/FFmpeg_icon.svg/1024px-FFmpeg_icon.svg.png" Style="vertical-align: middle;" Class="mr-3" />
                @:@preset.ToString()
            }
        </MudText>
    </TitleContent>
    <ChildContent>
        <MudTextField @bind-Value="preset.Name" Label="Name" Class="mb-2" />
        <MudSelect @bind-Value="preset.Container" Label="Container" OffsetY="true" T="string" Strict="true" Class="mb-2">
            <MudSelectItem Value="@("copy")">copy - No change</MudSelectItem>
            <MudDivider />
            @foreach (var c in PresetManager.Containers)
            {
                <MudSelectItem Value="@c.Name">@c</MudSelectItem>
            }
        </MudSelect>
        <MudGrid>
            <MudItem md="6">
                <MudCard Class="my-2">
                    <MudCardContent>
                        <MudSelect @bind-Value="preset.VideoEncoder" Label="Video Encoder" OffsetY="true" T="Encoder" Immediate="true" Class="">
                            <MudSelectItem T="Encoder" Value="@(new ())" />
                            <MudDivider />
                            @foreach (var c in PresetManager.VideoEncoders.Where(x => x.Options != null))
                            {
                                <MudSelectItem Value="@c"><MudIcon Icon="@Icons.Outlined.Article" Style="vertical-align: middle;" /> @c.ToString()</MudSelectItem>
                            }

                            @if (PresetManager.VideoEncoders.Any(x => x.Options != null))
                            {
                                <MudDivider />
                            }

                            @foreach (var c in PresetManager.VideoEncoders.Where(x => x.Options == null))
                            {
                                <MudSelectItem Value="@c" />
                            }
                        </MudSelect>
                        <MudSelect @bind-Value="preset.HardwareDecoder" Clearable="true" Label="Hardware Decoder" OffsetY="true" T="string" Immediate="true" Class="mt-3">
                            @foreach (var hwd in ApplicationService.HardwareDecoders)
                            {
                                <MudSelectItem Value="@hwd" />
                            }
                        </MudSelect>
                        <MudToolBar DisableGutters="true" Dense="true" Class="mt-3">
                            <MudNumericField @bind-Value="preset.VideoBitRate" Label="Video Bitrate" Disabled="@(disabledNoVideo || preset.VideoBitRateAutoCalc)" />
                            <MudToggleIconButton Icon="@Icons.Outlined.Calculate" ToggledIcon="@Icons.Outlined.Calculate" Color="Color.Default" Disabled="@disabledNoVideo" ToggledColor="Color.Secondary" Toggled="preset.VideoBitRateAutoCalc" ToggledChanged="@((toggled) => { preset.VideoBitRate = null; preset.VideoBitRateAutoCalc = toggled; })" />
                        </MudToolBar>
                        <MudNumericField @bind-Value="preset.FrameRate" Label="Framerate" Placeholder="Same as source" Disabled="@disabledNoVideo" Class="mt-3" />
                        <MudSelect @bind-Value="preset.B_Frames" Label="B Frames" Disabled="@disabledNoVideo" Class="mt-3">
                            <MudSelectItem Value="-1">Auto</MudSelectItem>
                            <MudSelectItem Value="0">Disabled</MudSelectItem>
                            <MudSelectItem Value="1"></MudSelectItem>
                            <MudSelectItem Value="2" />
                            <MudSelectItem Value="3" />
                            <MudSelectItem Value="4" />
                            <MudSelectItem Value="5" />
                            <MudSelectItem Value="6" />
                            <MudSelectItem Value="7" />
                            <MudSelectItem Value="8" />
                            <MudSelectItem Value="9" />
                            <MudSelectItem Value="10" />
                            <MudSelectItem Value="11" />
                            <MudSelectItem Value="12" />
                            <MudSelectItem Value="13" />
                            <MudSelectItem Value="14" />
                            <MudSelectItem Value="15" />
                            <MudSelectItem Value="16" />
                        </MudSelect>
                    </MudCardContent>
                </MudCard>
                @if (preset.VideoEncoder != null && !preset.VideoEncoder.IsCopy && preset.VideoEncoderOptions != null)
                {
                    <MudCard Class="my-2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Additional codec based options</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @foreach (var option in preset.VideoEncoderOptions)
                            {
                                @if (option?.EncoderOption == null)

                                {
                                    <MudText Class="pa-2">Invalid option detected, please check settings and save.</MudText>
                                }
                                else
                                {

                                    @switch (option.EncoderOption.Type)
                                    {
                                        case Presets.CodecOptionType.Number:
                                            {
                                                <MudToolBar DisableGutters="true" Dense="true">
                                                    <MudNumericField @bind-Value="option.Value" Label="@option.Name" Class="mb-5" Disabled="@(option.AutoCalculate)" />

                                                    @if (option.EncoderOption.AutoTune != null)
                                                    {
                                                        <MudToggleIconButton Icon="@Icons.Outlined.Calculate" ToggledIcon="@Icons.Outlined.Calculate" Color="Color.Default" Disabled="option.EncoderOption.DisabledByVideoBitRate && disabledVideoBitrate" ToggledColor="Color.Secondary" Toggled="option.AutoCalculate" ToggledChanged="@((toggled) => { option.IntValue = null; option.AutoCalculate = toggled; })" />
                                                    }
                                                </MudToolBar>
                                            }
                                            break;
                                        case Presets.CodecOptionType.Range:
                                            {
                                                <MudSlider @bind-Value="@option.IntValue" T="int?" Max="@option.EncoderOption.Max" Min="option.EncoderOption.Min" Immediate="true" Disabled="@(option.AutoCalculate || (option.EncoderOption.DisabledByVideoBitRate && disabledVideoBitrate))">
                                                    @option.Name: @option.Value
                                                    <MudIconButton Size="Size.Small" Icon="@Icons.Outlined.Clear" OnClick="@(() => { option.IntValue = null; })" Disabled="@(option.AutoCalculate)" />
                                                    @if (option.EncoderOption.AutoTune != null)
                                                    {
                                                        <MudToggleIconButton Size="Size.Small" Icon="@Icons.Outlined.Calculate" ToggledIcon="@Icons.Outlined.Calculate" Color="Color.Default" Disabled="option.EncoderOption.DisabledByVideoBitRate && disabledVideoBitrate" ToggledColor="Color.Secondary" Toggled="option.AutoCalculate" ToggledChanged="@((toggled) => { option.Value = null; option.AutoCalculate = toggled; })" />
                                                    }
                                                </MudSlider>

                                            }
                                            break;
                                        case Presets.CodecOptionType.Select:
                                            {
                                                <MudToolBar DisableGutters="true" Dense="true">
                                                    <MudSelect @bind-Value="option.Value" Label="@option.Name" Clearable="true" OffsetY="true" Class="mb-5" Disabled="@(option.AutoCalculate)">
                                                        @foreach (var c in option.EncoderOption.Values)
                                                                                {
                                                            <MudSelectItem Value="@c">@c</MudSelectItem>
                                                                                }
                                                    </MudSelect>
                                                    @if (option.EncoderOption.AutoTune != null)
                                                    {
                                                        <MudToggleIconButton Icon="@Icons.Outlined.Calculate" ToggledIcon="@Icons.Outlined.Calculate" Color="Color.Default" Disabled="option.EncoderOption.DisabledByVideoBitRate && disabledVideoBitrate" ToggledColor="Color.Secondary" Toggled="option.AutoCalculate" ToggledChanged="@((toggled) => { option.Value = null; option.AutoCalculate = toggled; })" />
                                                    }
                                                </MudToolBar>
                                            }
                                            break;
                                        case Presets.CodecOptionType.String:
                                            {
                                                <MudToolBar DisableGutters="true" Dense="true">
                                                    <MudTextField @bind-Value="option.Value" Label="@option.Name" Class="mb-5" Disabled="@(option.AutoCalculate)" />

                                                    @if (option.EncoderOption.AutoTune != null)
                                                    {
                                                        <MudToggleIconButton Icon="@Icons.Outlined.Calculate" ToggledIcon="@Icons.Outlined.Calculate" Color="Color.Default" Disabled="option.EncoderOption.DisabledByVideoBitRate && disabledVideoBitrate" ToggledColor="Color.Secondary" Toggled="option.AutoCalculate" ToggledChanged="@((toggled) => { option.Value = null; option.AutoCalculate = toggled; })" />
                                                    }
                                                </MudToolBar>
                                            }
                                            break;
                                    }
                                }
                            }
                        </MudCardContent>
                    </MudCard>
                }
            </MudItem>
            <MudItem md="6">
                @foreach (var fasp in preset.AudioStreamPresets)
                {
                    <AudioPreset AudioStreamPreset="@fasp" OnUpdate="AudioPresetUpdate" OnCopy="CopyAudioStreamPreset" />
                }
            </MudItem>



        </MudGrid>

        <MudTextField @bind-Value="preset.OptionalArguments" Label="Additional arguments" Class="mb-2" />

        <MudCardActions>
            <MudButton OnClick="savePreset" Color="Color.Primary" StartIcon="@Icons.Outlined.Save" Class="mr-3">Save</MudButton>
            @if (!NewPreset)
            {
                <MudButton OnClick="deletePreset" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" Disabled="@JobManager.PresetInUse(preset)">Delete</MudButton>
            }
        </MudCardActions>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public FFmpegPreset preset { get; set; }

    [Parameter]
    public bool NewPreset { get; set; }

    [Parameter]
    public EventCallback OnAdd { get; set; }

    private bool disabledNoVideo => preset.VideoEncoder?.IsCopy ?? true;
    private bool disabledVideoBitrate => preset.VideoBitRate.HasValue || preset.VideoBitRateAutoCalc;

    protected override void OnInitialized()
    {
        LayoutService.OnStateChanged += (o, e) => InvokeAsync(StateHasChanged);
        base.OnInitialized();
    }

    private void AudioPresetUpdate()
    {
        var firstCoverAny = preset.AudioStreamPresets.FirstOrDefault(f => f.CoversAny);

        if (firstCoverAny == null)
        {
            preset.AudioStreamPresets.Add(new());
        }
        else
        {
            if (firstCoverAny != preset.AudioStreamPresets.Last())
            {
                var indexofRemoval = preset.AudioStreamPresets.IndexOf(firstCoverAny) + 1;
                preset.AudioStreamPresets.RemoveRange(indexofRemoval, preset.AudioStreamPresets.Count() - indexofRemoval);
            }
        }
        InvokeAsync(StateHasChanged);
    }

    private void CopyAudioStreamPreset(FFmpegAudioStreamPreset asPreset)
    {
        var index = preset.AudioStreamPresets.IndexOf(asPreset);

        if (index >= 0)
        {
            var clone = asPreset.Clone();
            preset.AudioStreamPresets.Insert(index, clone);
            InvokeAsync(StateHasChanged);
        }
    }

    private async void savePreset()
    {
        using (LayoutService.Working("Saving..."))
        {

            await PresetManager.AddPresetAsync(preset);

            JobManager.InitialiseJobs(preset, ApplicationService.AppStoppingCancellationToken);

            if (OnAdd.HasDelegate)
            {
                await OnAdd.InvokeAsync();
            }

            LayoutService.RaiseChange();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void deletePreset()
    {
        using (LayoutService.Working("Deleting..."))
        {

            bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

            if (result ?? false)
            {
                await PresetManager.DeletePresetAsync(preset);
                LayoutService.RaiseChange();
            }
            await InvokeAsync(StateHasChanged);
        }
    }
}
