@inject IPresetManager PresetManager
@inject ILayoutService LayoutService

<div class="gridLayout">
    <div>
        <MudText Style="padding-top: 1.65em">
            When
        </MudText>
    </div>
    <div>
        <MudSelect T="AudioStreamRule?" OffsetY="true" @bind-Value="Rule" Strict="true" Immediate="true" TextChanged="resetValues" Label="Audio Stream">
            @foreach (var r in GetRules)
            {
                <MudSelectItem Value="r"></MudSelectItem>
            }
        </MudSelect>
    </div>
    @switch (AudioStreamPresetFilter.Rule)
    {
        case AudioStreamRule.Channels:
            {

                <div>
                    <MudSelect OffsetY="true" T="FilterComparitor" @bind-Value="AudioStreamPresetFilter.NumberComparitor" Converter="fcConverter">
                        @foreach (var nc in PresetManager.NumberComparitors)
                        {
                            <MudSelectItem Value="nc" />
                        }
                    </MudSelect>
                </div>
                <div>
                    <MudNumericField T="int" @bind-Value="AudioStreamPresetFilter.ChannelValue" />

                </div>

            }
            break;
        case AudioStreamRule.Codec:
            {
                <div>
                    <MudSwitch @bind-Checked="AudioStreamPresetFilter.Matches" Color="Color.Secondary" Style="padding-top: 1.2em;">@(AudioStreamPresetFilter.Matches ? "is" : "is not")</MudSwitch>
                </div>

                <div>
                    <MudSelect OffsetY="true" T="string" MultiSelection="true" @bind-SelectedValues="AudioStreamPresetFilter.Values" Label="Codec">
                        @foreach (var codec in PresetManager.AudioCodecs.Decoders())
                        {
                            <MudSelectItem Value="@codec.Name"></MudSelectItem>
                        }
                    </MudSelect>
                </div>
            }
            break;
        case AudioStreamRule.Language:
            {
                <div>
                    <MudSwitch @bind-Checked="AudioStreamPresetFilter.Matches" Color="Color.Secondary" Style="padding-top: 1.2em;">@(AudioStreamPresetFilter.Matches ? "is" : "is not")</MudSwitch>
                </div>

                <div>
                    <MudSelect T="string" MultiSelection="true" @bind-SelectedValues="AudioStreamPresetFilter.Values">
                        @foreach (var language in PresetManager.LanguageCodes.OrderByDescending(l => l.Key == "eng").ThenBy(l => l.Value))
                        {
                            <MudSelectItem Value="@language.Key">@language.Value</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            }
            break;
        default:
            <div></div>
            <div></div>
            break;
    }
    @if (Filters.Count > 1)
    {
        <div>
            <MudIconButton Icon="@Icons.Outlined.Delete" OnClick="OnDelete" />
        </div>
    }
</div>
@code {

    [Parameter]
    public FFmpegAudioStreamPresetFilter AudioStreamPresetFilter { get; set; }

    [Parameter]
    public List<FFmpegAudioStreamPresetFilter> Filters { get; set; }

    [Parameter]
    public bool IsFirst { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private AudioStreamRule? Rule
    {
        get => AudioStreamPresetFilter.Rule;
        set
        {
            AudioStreamPresetFilter.Rule = value;
            OnUpdate.InvokeAsync();
        }
    }

    private IEnumerable<AudioStreamRule?> GetRules
    {
        get
        {
            var rules = new List<AudioStreamRule?>(Enum.GetValues(typeof(AudioStreamRule)).Cast<AudioStreamRule?>());

            if (!IsFirst) rules.Remove(AudioStreamRule.Any);

            return rules.Except(Filters.Select(f => f.Rule).Where(x => x != AudioStreamPresetFilter.Rule));

        }

    }

    private int GetSize(int originalSize)
    {
        return Filters.Count > 1 ? originalSize - 1 : originalSize;
    }

    private void resetValues(string text)
    {
        if (AudioStreamPresetFilter.Rule.ToString() != text)
        {
            AudioStreamPresetFilter.Values = new HashSet<string>();
            AudioStreamPresetFilter.NumberComparitor = null;
        }

        OnUpdate.InvokeAsync();
        LayoutService.RaiseChange();
    }


    Converter<FilterComparitor> fcConverter = new Converter<FilterComparitor>
    {
        SetFunc = value => value?.ToString(),
        GetFunc = text => new FilterComparitor(text)
    };
}
