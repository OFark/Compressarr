@using System.IO;
@using Compressarr.Shared.Models

<folder>
    <input type="text" @bind="Folder" @oninput="dirInput" @onkeydown="keyPress" @onblur="dirBlur" class="form-control" />
    <ol>
        @foreach (var s in suggestions)
        {
            <li class="@(selectedSuggestion >= 0 && suggestions[selectedSuggestion].Name == s.Name ? "active" : "")" @onclick="(() => sugClicked(s))">@s.Name</li>
        }
    </ol>
</folder>

@code {

    private List<DirectorySuggestion> suggestions { get; set; } = new();

    [ParameterAttribute]
    public string Folder
    {
        get => _folder;
        set
        {
            if (_folder == value) return;

            _folder = value;
            FolderChanged.InvokeAsync(value);
        }
    }

    private string _folder;

    [Parameter]
    public EventCallback<string> FolderChanged { get; set; }

    private int selectedSuggestion = -1;

    private async void dirBlur(FocusEventArgs args)
    {
        await Task.Delay(200);
        suggestions = new();
    }

    private void dirInput(ChangeEventArgs args)
    {
        selectedSuggestion = -1;
        var path = args.Value as string;
        if (!string.IsNullOrEmpty(path))
        {
            try
            {
                if (Directory.Exists(path))
                {
                    suggestions = new DirectoryInfo(path).GetDirectories().Select(di => new DirectorySuggestion(di)).ToList();
                }
                else
                {
                    var parent = Path.GetDirectoryName(path);
                    if (!string.IsNullOrEmpty(parent))
                    {
                        suggestions = new DirectoryInfo(parent).GetDirectories().Where(di => di.FullName.Contains(path, StringComparison.OrdinalIgnoreCase))
                                                                                .Select(di => new DirectorySuggestion(di))
                                                                                .ToList();
                    }
                    else
                    {
                        suggestions = new();
                    }
                }
            }
            catch (Exception ex) when (
                ex is DirectoryNotFoundException ||
                ex is UnauthorizedAccessException)
            {
                suggestions = new();
            }
        }
    }

    private void keyPress(KeyboardEventArgs args)
    {
        switch (args.Code)
        {
            case "ArrowDown":
                {
                    selectedSuggestion++;
                    if (selectedSuggestion >= suggestions.Count)
                    {
                        selectedSuggestion = 0;
                    }

                    selectSuggection();
                }
                break;
            case "ArrowUp":
                {
                    selectedSuggestion--;
                    if (selectedSuggestion < 0)
                    {
                        selectedSuggestion = suggestions.Count - 1;
                    }
                    selectSuggection();
                }
                break;
            case "Enter":
            case "NumpadEnter":
            case "Tab":
                {
                    selectSuggection();
                    suggestions = new();
                }
                break;
        }
    }

    private void selectSuggection()
    {
        if (selectedSuggestion >= 0 && selectedSuggestion < suggestions.Count)
        {
            Folder = suggestions[selectedSuggestion].Suggestion;
        }
    }

    private void sugClicked(DirectorySuggestion suggestion)
    {
        Folder = suggestion.Suggestion;
        suggestions = new();
        selectedSuggestion = -1;
    }

}