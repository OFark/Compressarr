@page "/radarr"

@inject IRadarrService radarrService
@inject IFilterManager filterManager
@inject IJobManager JobManager
@inject ILayoutService layoutService
@inject IDialogService DialogService
@inject IApplicationService applicationService

<MudPaper id="divRadarr">
    <MudGrid>
        <MudItem xs="9"></MudItem>
        <MudItem xs="3">
            <MudToolBar>
                <MudToolBarSpacer />
                <MudButton StartIcon="@Icons.Outlined.MovieCreation" Color="Color.Secondary" Class="mt-6 mr-4" OnClick="@(() => radarrService.GetMoviesAsync(true))">Refresh</MudButton>
                <MudSelect @bind-Value="filterSelected" Label="Filters" OffsetY="true" Immediate="true">
                    @foreach (var filter in filterManager.GetFilters(MediaSource.Radarr))
                    {
                        <MudSelectItem Value="@filter.Name" />
                    }
                </MudSelect>
            </MudToolBar>
        </MudItem>
    </MudGrid>
    @if (!string.IsNullOrWhiteSpace(AlertMessage))
    {
        <MudAlert Severity="Severity.Error">@AlertMessage</MudAlert>
    }

    <MudGrid Spacing="1">
        <MudItem sm="11">
            <div class="my-2 filterList">
                <table class="filterTableWrapper">
                    <thead valign="baseline">
                        <tr>
                            <th class="hide">
                            </th>
                            <th>
                                <div class="mud-input-control mud-input-input-control">
                                    <div class="mud-input-control-input-container">
                                        <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                                            <select @bind="filterPropertyStr" required>
                                                @foreach (var fp in filterManager.RadarrFilterProperties.OrderBy(f => f.Key))
                                                {
                                                    <option value="@fp.Value">@fp.Key</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </th>
                            <th>
                                <div class="mud-input-control mud-input-input-control">
                                    <div class="mud-input-control-input-container">
                                        <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                                            <select @bind="filterComparitorStr" required>
                                                <option value="" disabled selected hidden>is...</option>
                                                @if (FilterProperty != null)
                                                {
                                                    foreach (var fc in filterManager.GetComparitors(FilterProperty))
                                                    {
                                                        <option value="@fc.Value">@fc.Key</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </th>
                            <th colspan="2">
                                @switch (FilterProperty.PropertyType)
                                {
                                    case FilterPropertyType.Boolean:
                                        {
                                            <MudSelect Value="filterValue" OffsetY="true">
                                                <MudSelectItem Value="@("True")" />
                                                <MudSelectItem Value="@("False")" />
                                            </MudSelect>
                                        }
                                        break;
                                    case FilterPropertyType.DateTime:
                                        {
                                            <MudDatePicker @bind-Text="filterValue" placeholder="something" />
                                        }
                                        break;
                                    case FilterPropertyType.String:
                                        {
                                            <MudTextField T="string" @bind-Text="filterValue" Placeholder="something" />

                                        }
                                        break;
                                    case FilterPropertyType.Number:
                                        {
                                            <MudNumericField T="decimal" @bind-Value="filterIntValue" Placeholder="something" />
                                        }
                                        break;
                                    case FilterPropertyType.Enum:
                                        {
                                            var filterValueResults = radarrService.GetValuesForProperty(filterPropertyStr).Result;

                                            if (filterValueResults.Success)
                                            {
                                                <MudSelect @bind-Value="filterValue" Required="true">
                                                    @foreach (var key in filterValueResults.Results)
                                                                    {
                                                        <MudSelectItem Value="@key" />
                                                                    }
                                                </MudSelect>
                                            }
                                            else
                                            {
                                                <MudText Color="Color.Error">@filterValueResults.ErrorString</MudText>
                                            }

                                            break;
                                        }
                                }
                            </th>
                            <th class="hide">
                                <MudButton OnClick="addFilter" Color="Color.Primary" StartIcon="@Icons.Outlined.Add">@newFilterTextButton</MudButton>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dlf in dlFilters)
                        {
                            <tr>
                                <DLFilter filter="dlf" OnDeleteFilter="deleteFilter" OnFilterUpdate="filterUpdate" />
                                <td>
                                    <MudButton OnClick="(() => groupFilter(dlf))" Color="Color.Primary" StartIcon="@Icons.Outlined.Add">or</MudButton>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </MudItem>
        <MudItem sm="1">

        </MudItem>
    </MudGrid>
    @if (dlFilters.Any())
    {
        <MudToolBar>
            @if (showSaveDialog)
            {
                <MudTextField @bind-Value="filterName" Label="Name" />
            }
            <MudButton OnClick="saveFilter" Color="Color.Primary" StartIcon="@Icons.Outlined.Save">Save</MudButton>
            <MudButton OnClick="clearFilters" Color="Color.Warning" StartIcon="@Icons.Outlined.Clear">Clear</MudButton>
            <MudButton OnClick="deleteSavedFilter" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" Disabled="JobManager.FilterInUse(filterName)">Delete</MudButton>
            <MudToolBarSpacer></MudToolBarSpacer>
        </MudToolBar>
    }
    <MudTable Items="movies" Dense="true" Striped="true" Hover="true" @ref="table">
        <HeaderContent>
            @if (applicationService.LoadMediaInfoOnFilters)
            {
                <MudTh>Info</MudTh>
            }
            @foreach (var p in filterManager.RadarrTableColumns)
            {
                <MudTh title="@p.Key" @ondblclick="@(() => filterOn(p.FilterOn))">@p.Name</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MovieView movie="@context" filterManager="filterManager" OnFilterBy="filterBy" OnUpdate="@(() => StateHasChanged())" />
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowInfo)
            {
                <MudTr>
                    <td colspan="99">
                        <MudCard>
                            <MudBlazor.MudCardContent>
                                <MudTreeView T="string" ExpandOnClick="true">
                                    <MudTreeViewItem Value='@($"Duration: {@context.MediaInfo.Duration}")' />
                                    <MudTreeViewItem Value='@($"Path: {@context.MediaInfo.Path}")' />
                                    <MudTreeViewItem Value='@($"Size: {@context.MediaInfo.Size}")' />
                                    <MudTreeViewItem Value="@($"Audio Streams: {context.MediaInfo.AudioStreams.Count()}")">
                                        @foreach (var s in context.MediaInfo.AudioStreams)
                                        {
                                            <MudTreeViewItem Value='@($"Stream: {s.Index}")'>
                                                <MudTreeViewItem Value='@($"Bitrate: {s.Bitrate}")' />
                                                <MudTreeViewItem Value='@($"Channels: {s.Channels}")' />
                                                <MudTreeViewItem Value='@($"Codec: {s.Codec}")' />
                                                <MudTreeViewItem Value='@($"Default: {s.Default}")' />
                                                <MudTreeViewItem Value='@($"Language: {s.Language}")' />
                                                <MudTreeViewItem Value='@($"Sample Rate: {s.SampleRate}")' />
                                            </MudTreeViewItem>
                                        }
                                    </MudTreeViewItem>
                                    <MudTreeViewItem Value="@($"Video Streams: {context.MediaInfo.VideoStreams.Count()}")">
                                        @foreach (var s in context.MediaInfo.VideoStreams)
                                        {
                                            <MudTreeViewItem Value='@($"Stream: {s.Index}")'>
                                                <MudTreeViewItem Value='@($"Bitrate: {s.Bitrate}")' />
                                                <MudTreeViewItem Value='@($"Codec: {s.Codec}")' />
                                                <MudTreeViewItem Value='@($"Default: {s.Default}")' />
                                                <MudTreeViewItem Value='@($"Framerate: {s.Framerate}")' />
                                                <MudTreeViewItem Value='@($"Height: {s.Height}")' />
                                                <MudTreeViewItem Value='@($"Width: {s.Width}")' />
                                                <MudTreeViewItem Value='@($"Pixel Format: {s.PixelFormat}")' />
                                                <MudTreeViewItem Value='@($"Ratio: {s.Ratio}")' />
                                            </MudTreeViewItem>
                                        }
                                    </MudTreeViewItem>
                                    <MudTreeViewItem Value="@($"Subtitle Streams: {context.MediaInfo.SubtitleStreams.Count()}")">
                                        @foreach (var s in context.MediaInfo.SubtitleStreams)
                                        {
                                            <MudTreeViewItem Value='@($"Stream: {s.Index}")'>
                                                <MudTreeViewItem Value='@($"Codec: {s.Codec}")' />
                                                <MudTreeViewItem Value='@($"Default: {s.Default}")' />
                                                <MudTreeViewItem Value='@($"Forced: {s.Forced}")' />
                                                <MudTreeViewItem Value='@($"Language: {s.Language}")' />
                                                <MudTreeViewItem Value='@($"Title: {s.Title}")' />
                                            </MudTreeViewItem>
                                        }
                                    </MudTreeViewItem>
                                </MudTreeView>
                            </MudBlazor.MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{5, 10, 25, 50, 100}" />
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private IEnumerable<Compressarr.Services.Models.Movie> Movies { get; set; }

    private bool showSaveDialog = false;
    private bool showingMovies = false;

    private long movieCount = 0;

    private string AlertMessage = null;

    private string filter = "";
    private List<string> filterValues;

    private string newFilterTextButton = "Add";

    private string filterPropertyStr = "title";
    private string filterComparitorStr = "==";
    private string filterValue;

    private decimal filterIntValue
    {
        get
        {
            return decimal.TryParse(filterValue, out var x) ? x : 0;
        }
        set
        {
            filterValue = value.ToString();
        }
    }

    private string filterName = "";
    private string filterStr = "";
    private string filterSelected
    {
        get
        {
            return filterName;
        }
        set
        {
            filterName = value;
            var filter = filterManager.GetFilter(filterName);
            if (filter != null)
            {
                dlFilters = filter.Filters.ToList().Clone();
                showSaveDialog = true;
                filterUpdate();
            }
            else
            {
                clearFilters();
            }
        }
    }
    private MudTable<Movie> table;

    private IEnumerable<Movie> movies = new HashSet<Movie>();

    private FilterProperty FilterProperty => filterManager.RadarrFilterProperties.FirstOrDefault(x => x.Value == filterPropertyStr);
    private FilterComparitor FilterComparitor => filterManager.GetComparitors(FilterProperty).FirstOrDefault(x => x.Value == filterComparitorStr);

    private List<DynamicLinqFilter> dlFilters { get; set; }

    [CascadingParameter]
    private ElementReference divContent { get; set; }

    protected override void OnInitialized()
    {
        dlFilters = new List<DynamicLinqFilter>();

        radarrService.OnUpdate += (o,e) => InvokeAsync(() => StateHasChanged());

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMovies();
        }
    }

    private async void addFilter()
    {

        if (FilterProperty != null && FilterComparitor != null && !string.IsNullOrWhiteSpace(filterValue))
        {
            var dlFilter = new DynamicLinqFilter(FilterProperty, FilterComparitor, filterValue);

            if (dlFilters.Count == 0)
            {
                dlFilter.IsFirst = true;
            }
            else
            {
                dlFilter.LogicalOperator = "and";
            }

            dlFilters.Add(dlFilter);
            resetFilterInputs();

            filterUpdate();
        }

    }

    private async void clearFilters()
    {
        dlFilters = new List<DynamicLinqFilter>();
        filterName = null;
        filterUpdate();
    }

    private void filterBy(KeyValuePair<string, object> filter)
    {
        filterPropertyStr = filter.Key;
        filterValue = filter.Value.ToString();
    }

    private void filterOn(string filter)
    {
        filterPropertyStr = filter;
        filterValue = null;
    }

    private async void groupFilter(DynamicLinqFilter filter)
    {

        if (FilterProperty != null && FilterComparitor != null && !string.IsNullOrWhiteSpace(filterValue))
        {
            var dlFilter = new DynamicLinqFilter(FilterProperty, FilterComparitor, filterValue);
            dlFilter.LogicalOperator = "or";

            if (filter.IsGroup)
            {
                filter.SubFilters.Add(dlFilter);
            }
            else
            {
                var cloneFilter = new DynamicLinqFilter(filter.Property, filter.Comparitor, filter.Value);
                cloneFilter.IsFirst = true;

                filter.SubFilters = new List<DynamicLinqFilter>();
                filter.SubFilters.Add(cloneFilter);
                filter.SubFilters.Add(dlFilter);
                filter.Comparitor = null;
                filter.Property = null;
                filter.Value = null;
            }

            resetFilterInputs();
            filterUpdate();
        }
    }

    private void deleteFilter(DynamicLinqFilter filter)
    {
        if (dlFilters.Contains(filter))
        {
            dlFilters.Remove(filter);
            var firstFilter = dlFilters.FirstOrDefault();
            if (firstFilter != null)
            {
                firstFilter.LogicalOperator = null;
            }
        }
        else
        {
            foreach (var dlFilter in dlFilters)
            {
                if (dlFilter.SubFilters.Contains(filter))
                {
                    dlFilter.SubFilters.Remove(filter);
                    if (dlFilter.SubFilters.Count == 1)
                    {
                        dlFilter.SubFilters.First().LogicalOperator = dlFilter.LogicalOperator;
                        dlFilters.Insert(dlFilters.IndexOf(dlFilter), dlFilter.SubFilters.First());
                        dlFilters.Remove(dlFilter);
                    }
                    break;
                }
            }
        }

        filterUpdate();
    }

    private async void deleteSavedFilter()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result ?? false)
        {
            if (!string.IsNullOrWhiteSpace(filterName))
            {
                await filterManager.DeleteFilter(filterName);
                filterName = null;
                showSaveDialog = false;
                clearFilters();
            }
        }
    }

    private void saveFilter()
    {
        if (string.IsNullOrWhiteSpace(filterName))
        {
            showSaveDialog = !showSaveDialog;
        }
        else
        {
            filterManager.AddFilter(dlFilters, filterName, MediaSource.Radarr);
            JobManager.InitialiseJobs(filterManager.GetFilter(filterName));
        }
    }

    private void resetFilterInputs()
    {
        filterPropertyStr = "title";
        filterComparitorStr = "==";
        filterValue = null;
    }

    private async void filterUpdate()
    {
        if (dlFilters.Any())
        {
            filter = filterManager.ConstructFilterQuery(dlFilters, out filterValues);
            var formatStr = System.Text.RegularExpressions.Regex.Replace(filter, @"@(\d)", "\"{$1}\"");
            newFilterTextButton = "And";
        }
        else
        {
            filter = string.Empty;
            filterValues = new();
            newFilterTextButton = "Add";
        }

        radarrService.MovieFilter = filter;
        radarrService.MovieFilterValues = filterValues;

        await RefreshMovies(this, null);

        StateHasChanged();
    }

    private async Task RefreshMovies(object sender, EventArgs e)
    {
        var _result = await radarrService.GetMoviesAsync();
        if (_result.Success)
        {
            movies = _result.Results;
        }
        else
        {
            AlertMessage = _result.ErrorString;
        }

        _ = InvokeAsync(() => StateHasChanged());
    }

    private async Task LoadMovies()
    {


        using (layoutService.Working("Loading"))
        {
            await RefreshMovies(this, null);

            StateHasChanged();
        }
    }

}