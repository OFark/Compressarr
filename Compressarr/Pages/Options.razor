@page "/options"
@using Compressarr.FFmpegFactory;
@using Compressarr.Filtering;
@using Compressarr.JobProcessing;
@using Compressarr.Services;
@using Compressarr.Settings;
@using Newtonsoft.Json;
@using Microsoft.Extensions.Options;

@inject IFFmpegInitialiser FFmpegInitialiser
@inject IFilterManager filterManager
@inject IJobManager jobManager
@inject IRadarrService radarrService
@inject ISettingsManager settingsManager
@inject ISonarrService sonarrService

<MudContainer MaxWidth="MaxWidth.Large">

    <MudPaper Class="px-4">
        <MudCard Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Radarr</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (settingsManager.RadarrSettings != null && settingsManager.RadarrSettings.Ok)
                {
                    @if (string.IsNullOrWhiteSpace(radarrTestResponse))
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <MudText>
                            Radarr: @settingsManager.RadarrSettings.APIURL
                            <MudIconButton Color="@(radarrConnected ? Color.Success : Color.Error)" OnClick="toggleRadarrStatus" Icon="@(radarrConnected ? Icons.Material.Outlined.Check : Icons.Material.Outlined.Error )" />
                        </MudText>
                    }

                }
                else
                {
                    <MudList Dense="true">
                        <MudListItem>
                            <MudTextField @bind-Value="radarrURL" Label="Radarr URL" />
                        </MudListItem>
                        <MudListItem>
                            <MudTextField @bind-Value="radarrAPIKey" Label="Radarr API key" />
                        </MudListItem>
                    </MudList>
                }

                @if (showRadarrStatus)
                {
                    <pre>@radarrTestResponse</pre>
                }
            </MudCardContent>
            <MudCardActions>
                @if (settingsManager.RadarrSettings?.APIURL != null)
                {
                    <MudButton Color="Color.Warning" OnClick="deleteRadarrSetting" StartIcon="@Icons.Outlined.Delete">Delete</MudButton>
                }
                else
                {
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="saveRadarrSettings" Disabled="@(string.IsNullOrWhiteSpace(radarrURL) || string.IsNullOrWhiteSpace(radarrAPIKey))" StartIcon="@Icons.Material.Outlined.Save">Save</MudButton>
                }
            </MudCardActions>
        </MudCard>

        <MudCard Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Sonarr</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (settingsManager.SonarrSettings != null && settingsManager.SonarrSettings.Ok)
                {
                    @if (string.IsNullOrWhiteSpace(sonarrTestResponse))
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <MudText>
                            Sonarr: @settingsManager.SonarrSettings.APIURL
                            <MudIconButton Color="@(sonarrConnected ? Color.Success : Color.Error)" OnClick="toggleSonarrStatus" Icon="@(sonarrConnected ? Icons.Material.Outlined.Check : Icons.Material.Outlined.Error )" />
                        </MudText>
                    }

                }
                else
                {
                    <MudList Dense="true">
                        <MudListItem>
                            <MudTextField @bind-Value="sonarrURL" Label="Sonarr URL" />
                        </MudListItem>
                        <MudListItem>
                            <MudTextField @bind-Value="sonarrAPIKey" Label="Sonarr API key" />
                        </MudListItem>
                    </MudList>
                }

                @if (showSonarrStatus)
                {
                    <pre>@sonarrTestResponse</pre>
                }
            </MudCardContent>
            <MudCardActions>
                @if (settingsManager.SonarrSettings?.APIURL != null)
                {
                    <MudButton Color="Color.Warning" OnClick="deleteSonarrSetting" StartIcon="@Icons.Outlined.Delete">Delete</MudButton>
                }
                else
                {
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="saveSonarrSettings" Disabled="@(string.IsNullOrWhiteSpace(sonarrURL) || string.IsNullOrWhiteSpace(sonarrAPIKey))" StartIcon="@Icons.Material.Outlined.Save">Save</MudButton>
                }
            </MudCardActions>
        </MudCard>

        <MudCard Class="mb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Settings</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudSelect T="LogLevel" @bind-Value="logLevel" Label="Log Level">
                    @foreach (LogLevel ll in Enum.GetValues(typeof(LogLevel)))
                    {
                        <MudSelectItem Value="ll" />
                    }
                </MudSelect>
            </MudCardContent>
            <MudCardActions>
                    <MudButton Color="Color.Primary" OnClick="saveSettings" StartIcon="@Icons.Outlined.Save">Save</MudButton>
            </MudCardActions>
        </MudCard>

        <MudCard>
            <MudCardContent>
                <MudList Dense="true">
                    <MudListItem>Application: @System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString()</MudListItem>
                    <MudListItem>Runtime: @Environment.Version.ToString()</MudListItem>
                    <MudListItem>FFmpeg: @FFmpegInitialiser.Version</MudListItem>
                    <MudListItem>OS: @Environment.OSVersion.VersionString</MudListItem>
                    <MudListItem>OS 64bit: @Environment.Is64BitOperatingSystem</MudListItem>
                    <MudListItem>App 64bit: @Environment.Is64BitProcess</MudListItem>
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudPaper>
</MudContainer>

@code {
    private string radarrURL { get; set; }
    private string radarrAPIKey { get; set; }
    private string radarrTestResponse { get; set; }
    private bool radarrConnected { get; set; }
    private bool showRadarrStatus { get; set; }

    private string sonarrURL { get; set; }
    private string sonarrAPIKey { get; set; }
    private string sonarrTestResponse { get; set; }
    private bool sonarrConnected { get; set; }
    private bool showSonarrStatus { get; set; }

    private LogLevel logLevel { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //if (settingsManager.HasSetting(Settings.SettingType.RadarrURL))
        if (settingsManager.RadarrSettings != null)
        {
            radarrTestResponse = null;
            //var ss = await radarrService.TestConnection(settingsManager.Settings[Settings.SettingType.RadarrURL], settingsManager.Settings[Settings.SettingType.RadarrAPIKey]);
            var ss = await radarrService.TestConnection(settingsManager.RadarrSettings);

            radarrConnected = ss.Success;

            radarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });
        }

        //if (settingsManager.HasSetting(Settings.SettingType.SonarrURL))
        if (settingsManager.SonarrSettings != null)
        {
            sonarrTestResponse = null;
            //var ss = sonarrService.TestConnection(settingsManager.Settings[Settings.SettingType.SonarrURL], settingsManager.Settings[Settings.SettingType.SonarrAPIKey]);
            var ss = await sonarrService.TestConnection(settingsManager.SonarrSettings);

            sonarrConnected = ss.Success;

            sonarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });
        }

        logLevel = settingsManager.GetLogLevel();

        _ = base.OnInitializedAsync();
    }



    private void deleteRadarrSetting()
    {
        settingsManager.RadarrSettings = null;
        _ = settingsManager.SaveAppSetting();
    }

    private void deleteSonarrSetting()
    {
        settingsManager.SonarrSettings = null;
        _ = settingsManager.SaveAppSetting();
    }

    private async void saveSettings()
    {
        await settingsManager.UpdateLogLevel(logLevel);
    }

    private async void saveRadarrSettings()
    {
        if (!string.IsNullOrWhiteSpace(radarrURL) && !string.IsNullOrWhiteSpace(radarrAPIKey))
        {
            radarrURL = radarrURL.TrimEnd('/');
            radarrTestResponse = null;
            var radarrServiceSettings = new APISettings() { APIURL = radarrURL, APIKey = radarrAPIKey };
            var ss = await radarrService.TestConnection(radarrServiceSettings);

            if (ss.Success)
            {
                settingsManager.RadarrSettings = radarrServiceSettings;

                _ = settingsManager.SaveAppSetting();

                radarrConnected = ss.Success;

                radarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });

                radarrService.ClearCache();

                showRadarrStatus = false;
            }
            else
            {
                radarrTestResponse = ss.ErrorMessage;
                showRadarrStatus = true;
            }
            StateHasChanged();
        }
    }

    private async void saveSonarrSettings()
    {
        if (!string.IsNullOrWhiteSpace(sonarrURL) && !string.IsNullOrWhiteSpace(sonarrAPIKey))
        {
            sonarrURL = sonarrURL.TrimEnd('/');
            sonarrTestResponse = null;
            var sonarrServiceSettings = new APISettings() { APIURL = radarrURL, APIKey = radarrAPIKey };
            var ss = await sonarrService.TestConnection(sonarrServiceSettings);

            if (ss.Success)
            {
                settingsManager.SonarrSettings = sonarrServiceSettings;

                _ = settingsManager.SaveAppSetting();

                sonarrConnected = ss.Success;

                sonarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });

                showSonarrStatus = false;
            }
            else
            {
                sonarrTestResponse = ss.ErrorMessage;
                showSonarrStatus = true;
            }
            StateHasChanged();
        }
    }

    private void toggleRadarrStatus()
    {
        showRadarrStatus = !showRadarrStatus;
    }

    private void toggleSonarrStatus()
    {
        showSonarrStatus = !showSonarrStatus;
    }
}
