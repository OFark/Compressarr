@implements IDisposable

@inject IApplicationService applicationService
@inject IDialogService DialogService
@inject IFilterManager filterManager
@inject IJobManager jobManager
@inject ILayoutService layoutService
@inject IMediaInfoService mediaInfoService
@inject IPresetManager presetManager


<MudExpansionPanel Class="job">
    <TitleContent>
        <MudText>
            @if (NewJob)
            {
                <MudAvatar Color="Color.Dark" Class="mr-3" Style="vertical-align: middle;" >
                    <MudIcon Icon="@Icons.Outlined.PlaylistAdd" />
                </MudAvatar>
                @:New Job
            }
            else
            {
                @if (string.IsNullOrWhiteSpace(FilterType))
                {
                    <MudFab Size="Size.Small" Class="mr-3" Icon="@Icons.Outlined.Sync" Color="Color.Tertiary" />
                }
                else
                {
                    <MudAvatar Color="Color.Transparent" Rounded="true" Image="@FilterImageSrc" Style="vertical-align: middle;" Class="mr-3" />
                }
                @:@job.FilterName | @job.Preset => @job.DestinationFolder
                <MudChip Color="@buttonColour">@buttonText</MudChip>
            }
        </MudText>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            <MudItem xs="12">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="@Typo.h6">@(editing ? "Settings" : "Workload")</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (!NewJob)
                            {
                                <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Outlined.Sync" Disabled="@(!job.Condition.SafeToInitialise)" @onclick="reInitialise" title="Re-Initialise" />
                                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" Disabled="@(!job.Condition.SafeToInitialise)" @onclick="() => { editJob = !editJob; }" />
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (editing)
                        {
                            <MudForm>
                                <MudSelect T="string" Required="true" Label="Filter" @bind-Value="job.FilterName">
                                    @foreach (var c in filterManager.Filters)
                                    {
                                        <MudSelectItem Value="@c.Name">@c.Name - @c.MediaSource</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudSelect T="string" Required="true" Label="Preset" @bind-Value="job.PresetName">
                                    @foreach (var c in presetManager.Presets)
                                    {
                                        <MudSelectItem Value="@c.Name">@c.ToString()</MudSelectItem>
                                    }
                                </MudSelect>

                                <DirectoryLookup @bind-Folder="@job.DestinationFolder" Label="Destination Folder" Required="true" />

                                <MudCheckBox @bind-Checked="job.AutoImport" Label="Auto Import"></MudCheckBox>

                                @if (job.AutoImport)
                                {
                                    <MudNumericField Style="" @bind-Value="minSSIM" Label="Minimum SSIM" Min="0" Max="100" Adornment="Adornment.End" AdornmentText="%" />
                                    <MudNumericField @bind-Value="maxComp" Label="Maximum Compression" Min="0" Max="100" Adornment="Adornment.End" AdornmentText="%" />
                                }
                            </MudForm>
                        }
                        else
                        {
                            @if (job.WorkLoad != null)
                            {
                                <MudTable Items="job.WorkLoad" Striped="true" Dense="true">
                                    <HeaderContent>
                                        <MudTh></MudTh>
                                        <MudTh>Name</MudTh>
                                        <MudTh>Percent</MudTh>
                                        <MudTh>Frame</MudTh>
                                        <MudTh>FPS</MudTh>
                                        <MudTh>Q</MudTh>
                                        <MudTh>Size</MudTh>
                                        <MudTh>Time</MudTh>
                                        <MudTh>Length</MudTh>
                                        <MudTh>Bitrate</MudTh>
                                        <MudTh>Speed</MudTh>
                                        <MudTh>Finished</MudTh>
                                        <MudTh>SSIM</MudTh>
                                        <MudTh>Compression</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd>
                                            <MudText>
                                                <MudIconButton Size="Size.Small" Icon="@(context.ShowArgs ? Icons.Outlined.Cancel : Icons.Outlined.Info)" OnClick="@(() => toggleArgs(context))"></MudIconButton>
                                                @if ((context.ShowArgs && context.Arguments == null) || context.Processing.Processing)
                                                        {
                                                    <MudProgressCircular Class="ml-2" Style="vertical-align: middle;" Size="Size.Small" Indeterminate="true" Color="Color.Secondary" />
                                                        }
                                            </MudText>
                                        </MudTd>
                                        <MudTd DataLabel="Name">@context.SourceFileName</MudTd>
                                        <MudTd DataLabel="Percent"><MudText Align="Align.Center">@context.Percent.Adorn("%")</MudText></MudTd>
                                        <MudTd DataLabel="Frame"><MudText Align="Align.Center">@context.Frame</MudText></MudTd>
                                        <MudTd DataLabel="FPS"><MudText Align="Align.Center">@context.FPS</MudText></MudTd>
                                        <MudTd DataLabel="Q"><MudText Align="Align.Center">@context.Q</MudText></MudTd>
                                        <MudTd DataLabel="Size"><MudText Align="Align.Center">@context.Size</MudText></MudTd>
                                        <MudTd DataLabel="Time"><MudText Align="Align.Center">@context.Duration</MudText></MudTd>
                                        <MudTd DataLabel="Length"><MudText Align="Align.Center">@context.TotalLength?.ToStringTimeSeconds()</MudText></MudTd>
                                        <MudTd DataLabel="Bitrate"><MudText Align="Align.Center">@context.Bitrate</MudText></MudTd>
                                        <MudTd DataLabel="Speed"><MudText Align="Align.Center">@context.Speed</MudText></MudTd>
                                        <MudTd DataLabel="Finished">
                                            <MudText Align="Align.Center">
                                                @if (context.Finished)
                                                        {
                                                            if (context.Success)
                                                            {
                                                        <MudIcon Color="Color.Success" Icon="@Icons.Material.Outlined.Check" />
                                                            }
                                                            else
                                                            {
                                                        <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.Error" />
                                                            }
                                                        }
                                            </MudText>
                                        </MudTd>
                                        <MudTd DataLabel="SSIM"><MudText Align="Align.Center">@context.SSIM.ToPercent(2).Adorn("%")</MudText></MudTd>
                                        <MudTd DataLabel="Compression"><MudText Align="Align.Center">@context.Compression.ToPercent(2).Adorn("%")</MudText></MudTd>
                                    </RowTemplate>
                                    <ChildRowContent>
                                        @if (context.ShowArgs || (context.Processing.Processing && context.Arguments == null))
                                                {
                                            <MudTr>
                                                <MudTd colspan="14">
                                                    @if (context.Arguments != null)
                                                            {
                                                        <MudPaper Elevation="0">
                                                            <MudList Dense="true">
                                                                @foreach (var arg in context.Arguments.Select(x => applicationService.InsertNamesIntoFFmpegPreviews ? string.Format(x, context.SourceFile, context.DestinationFile) : x))
                                                                        {
                                                                    <MudListItem>@arg</MudListItem>
                                                                        }
                                                            </MudList>
                                                        </MudPaper>
                                                            }
                                                            else if (context.ArgCalcResults != null)
                                                            {
                                                        <MudSimpleTable Dense="true">
                                                            <thead>
                                                                @foreach (var arg in context.ArgCalcResults)
                                                                        {
                                                                    <MudTd>@arg.Argument</MudTd>
                                                                        }
                                                            </thead>
                                                            <tbody>
                                                                <MudTr>
                                                                    @foreach (var arg in context.ArgCalcResults)
                                                                            {
                                                                        <MudTd valign="top">
                                                                            <MudTable Dense="true" Items="arg.AutoPresetResultSet" Style="vertical-align: auto">
                                                                                <HeaderContent>
                                                                                    <MudTh>val</MudTh>
                                                                                    <MudTh>SSIM</MudTh>
                                                                                    <MudTh>Compression</MudTh>
                                                                                </HeaderContent>
                                                                                <RowTemplate Context="TestContext">
                                                                                    <MudTd>@TestContext.Key</MudTd>
                                                                                    @if (TestContext.Value != null)
                                                                                            {
                                                                                        <MudTd>
                                                                                            @if (@TestContext.Value.SSIM > 0)
                                                                                                    {
                                                                                                @TestContext.Value.SSIM.ToPercent(2).Adorn("%");
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                <MudProgressLinear Color="Color.Dark" Value="@TestContext.Value.SSIMProgress" />
                                                                                                    }
                                                                                        </MudTd>
                                                                                        <MudTd>
                                                                                            @if (TestContext.Value.Size > 0)
                                                                                                    {
                                                                                                @:@TestContext.Value.Percent.Adorn("%") - @TestContext.Value.Size.ToFileSize()
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                <MudProgressLinear Color="Color.Dark" Value="@TestContext.Value.EncodingProgress" />
                                                                                                    }
                                                                                        </MudTd>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                        <MudTd>&nbsp;</MudTd>
                                                                                        <MudTd>&nbsp;</MudTd>
                                                                                            }
                                                                                </RowTemplate>
                                                                            </MudTable>
                                                                        </MudTd>
                                                                            }
                                                                </MudTr>
                                                            </tbody>
                                                        </MudSimpleTable>
                                                            }
                                                </MudTd>
                                            </MudTr>
                                            @if (context.ShowArgs && context.Console != null && context.Console.Any())
                                                    {
                                                <MudTr>
                                                    <MudTd UserAttributes="@(new() { { "colspan", 14 } })">
                                                        <MudPaper Outlined="false" Square="true" class="jobEventsScrollWrapper">
                                                            <MudPaper Square="true" Class="mud-theme-dark pa-2 jobEvents">
                                                                @foreach (var e in context.Console)
                                                                        {
                                                                    <MudText Class="event" Color="e.Color" Typo="Typo.body2">@e.Message</MudText>
                                                                        }
                                                            </MudPaper>
                                                        </MudPaper>
                                                    </MudTd>
                                                </MudTr>
                                                    }
                                                }
                                    </ChildRowContent>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[]{5, 10, 50, 100}" />
                                    </PagerContent>
                                </MudTable>
                                <MudPaper Class="mt-2" Elevation="0">
                                    <MudProgressLinear Color="Color.Primary" Value="initialisationProgress" />
                                </MudPaper>
                                @if (!NewJob)
                                {
                                    <MudToolBar>
                                        <MudButton Variant="Variant.Filled" FullWidth="true" Color="@buttonColour" @onclick="startJob" @onmouseover="() => { mouseOnButton = true; }" @onmouseout="() => { mouseOnButton = false; }">@buttonText</MudButton>
                                    </MudToolBar>
                                }
                            }
                            else
                            {
                                <MudSkeleton Width="100%" Height="30px" />
                                <MudSkeleton Width="20%" />
                                <MudSkeleton Width="30%" />
                                <MudSkeleton Width="18%" />
                                <MudSkeleton Width="35%" />
                            }
                        }
                    </MudCardContent>
                    <MudCardActions>
                        @if (editing)
                        {
                            <MudButton @onclick="saveJob" Disabled="@(!saveEnabled)" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Save">Save</MudButton>
                            @if (!NewJob)
                            {
                                <MudButton @onclick="deleteJob" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete">Delete</MudButton>
                                @if (canReload)
                                {
                                    <MudButton StartIcon="@Icons.Material.Outlined.Refresh" Color="Color.Secondary" @onclick="reloadJob">Reload</MudButton>
                                }
                            }
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                @if (job.Events?.Any() ?? false)
                {
                    <MudText Typo="Typo.h5"><MudIcon Icon="@Icons.Outlined.Article" Color="Color.Primary" /> Log</MudText>
                    <MudPaper Outlined="false" Square="true" class="jobEventsScrollWrapper">
                        <MudPaper Square="true" Class="mud-theme-dark pa-2 jobEvents">
                            @if (job.Events != null)
                            {
                                @foreach (var e in job.Events)
                                {
                                    <MudText Class="event" Color="e.Color" Typo="Typo.body2">@e.Date.ToString("HH:mm:ss") - @e.Message</MudText>
                                }
                            }
                        </MudPaper>
                    </MudPaper>
                }
                else if (!NewJob)
                {
                    <MudSkeleton Width="10%" />
                    <MudSkeleton Width="100%" Height="195px" />
                }
            </MudItem>
        </MudGrid>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public Compressarr.JobProcessing.Models.Job job { get; set; }

    [Parameter]
    public bool NewJob { get; set; }

    [Parameter]
    public EventCallback OnAdd { get; set; }


    private bool canReload, editJob, mouseOnButton;

    private bool editing => editJob || NewJob;

    private bool saveEnabled => (editing || NewJob) && job?.FilterName != null && job?.PresetName != null && job?.DestinationFolder != null;

    private string FilterImageSrc => $"https://raw.githubusercontent.com/{FilterType.Capitalise()}/{FilterType.Capitalise()}/develop/Logo/{FilterType.Capitalise()}.svg";
    private string FilterType => job?.Filter?.MediaSource.ToString().ToLower();

    private double initialisationProgress;

    private CancellationTokenSource cancellationTokenSource;


    protected override void OnInitialized()
    {
        job.StatusUpdate += jobStatusUpdate;
        job.InitialisationProgress = new Progress<double>(jobProgress);
    }


    private int? minSSIM
    {
        get
        {
            return job.MinSSIM.HasValue ? (int)(job.MinSSIM * 100) : null;
        }
        set
        {
            if (value.HasValue)
            {
                job.MinSSIM = (decimal)value / 100;
            }
            else
            {
                job.MinSSIM = null;
            }
        }
    }

    private int? maxComp
    {
        get
        {
            return job.MaxCompression.HasValue ? (int)(job.MaxCompression * 100) : null;
        }
        set
        {
            if (value.HasValue)
            {
                job.MaxCompression = (decimal)value / 100;
            }
            else
            {
                job.MaxCompression = null;
            }
        }
    }

    private string buttonText => (mouseOnButton ? job.Condition.SafeToRun ? "Go!" : job.Condition.SafeToInitialise ? "Initialise" : job.Condition.CanCancel ? "Cancel" : null : null) ?? job.State.ToString().ToCamelCaseSplit();



    private Color buttonColour =>
        job.Condition.SafeToRun ? Color.Primary : job.Condition.SafeToInitialise ? Color.Secondary : job.State == JobState.Error ? Color.Error : Color.Warning;

    private void startJob()
    {
        if (job.Condition.SafeToRun)
        {
            jobManager.RunJob(job);
        }
        else if (job.Condition.SafeToInitialise)
        {
            jobManager.InitialiseJob(job);
        }
        else if (job.Condition.CanCancel)
        {
            jobManager.CancelJob(job);
        }
    }

    private async Task toggleArgs(WorkItem wi)
    {
        wi.ShowArgs = !wi.ShowArgs;

        await InvokeAsync(StateHasChanged);

        if (wi.ShowArgs)
        {
            cancellationTokenSource = new();
        }
        else
        {
            cancellationTokenSource.Cancel();
        }

        if (wi.Arguments == null && !job.Condition.Prepare.Processing)
        {
            var results = await presetManager.GetArguments(job.Preset, wi, cancellationTokenSource.Token);
            if (results.Success)
            {
                wi.Arguments = results.Arguments;
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    private bool running => job.State == JobState.Running;



    private void jobProgress(double val)
    {
        initialisationProgress = val;
        InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        job.StatusUpdate -= jobStatusUpdate;
    }

    private void jobStatusUpdate(object caller, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    private async void reInitialise()
    {
        await jobManager.InitialiseJob(job);
    }

    private void reloadJob()
    {
        using (layoutService.Working("Reloading..."))
        {
            job = jobManager.ReloadJob(job);
            canReload = false;
            InvokeAsync(StateHasChanged);
        }
    }

    private async void saveJob()
    {
        using (layoutService.Working("Saving..."))
        {

            var success = await jobManager.AddJobAsync(job);
            editJob = !success;
            canReload = !success && !NewJob;

            if (success && NewJob)
            {
                if (OnAdd.HasDelegate)
                {
                    _ = OnAdd.InvokeAsync();
                    return;
                }
            }
            else
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async void deleteJob()
    {
        using (layoutService.Working("Deleting..."))
        {
            bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

            if (result ?? false)
            {
                await jobManager.DeleteJob(job);
                await InvokeAsync(StateHasChanged);
            }
        }
    }


}
