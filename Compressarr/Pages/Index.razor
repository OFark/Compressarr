@page "/"
@using Compressarr.Filtering;
@using Compressarr.Filtering.Models;
@using Compressarr.JobProcessing;
@using JobProcessing.Models;
@using Newtonsoft.Json;

@inject Compressarr.Settings.SettingsManager settingsManager
@inject Compressarr.Services.Interfaces.IRadarrService radarrService
@inject Compressarr.Services.Interfaces.ISonarrService sonarrService
@inject Compressarr.FFmpegFactory.FFmpegManager FFmpegManager
@inject FilterManager filterManager
@inject JobManager jobManager

@if (!string.IsNullOrWhiteSpace(AlertMessage))
{
    <div class="alert alert-danger">@AlertMessage</div>
}

//todo: Move elsewhere
@*<fieldset>
        <legend>Radarr</legend>
        @if (settingsManager.HasSetting(Settings.SettingType.RadarrURL))
        {
            <span>Radarr: @settingsManager.GetSetting(Settings.SettingType.RadarrURL)</span>
            <button @onclick="toggleRadarrStatus"><i class="fas @(string.IsNullOrWhiteSpace(radarrTestResponse) ? "fa-spinner fa-spin" : "fa-check")"></i></button>
            <button @onclick="@(() => deleteSetting(Settings.SettingType.RadarrURL))"><i class="fas fa-trash-alt"></i></button>
        }
        else
        {
            <input @bind="radarrURL" placeholder="Radarr URL" />
            <input @bind="radarrAPIKey" placeholder="Radarr API key" />
            <button @onclick="saveRadarrSettings"><i class="fas fa-save"></i></button>
        }

        @if (showRadarrStatus)
        {
            <pre>@radarrTestResponse</pre>
        }
    </fieldset>

    <fieldset>
        <legend>Sonarr</legend>
        @if (settingsManager.HasSetting(Settings.SettingType.SonarrURL))
        {
            <span>Sonarr: @settingsManager.GetSetting(Settings.SettingType.SonarrURL)</span>
            <button @onclick="toggleSonarrStatus"><i class="fas @(string.IsNullOrWhiteSpace(sonarrTestResponse) ? "fa-spinner fa-spin" : "fa-check")"></i></button>
            <button @onclick="@(() => deleteSetting(Settings.SettingType.SonarrURL))"><i class="fas fa-trash-alt"></i></button>
        }
        else
        {
            <input @bind="sonarrURL" placeholder="Sonarr URL" />
            <input @bind="sonarrAPIKey" placeholder="Sonarr API key" />
            <button @onclick="saveSonarrSettings"><i class="fas fa-save"></i></button>
        }

        @if (showSonarrStatus)
        {
            <pre>@sonarrTestResponse</pre>
        }
    </fieldset>*@

<h1 title="Security isn't a dirty word, Blackadder. 'Crevice' is a dirty word, but 'security' isn't.">Jobs</h1>
@{
    if (!filterManager.Filters.Any())
    {
        <p>So you need to define a filter for either Radarr, Sonarr or both.</p>
    }
    else if (!FFmpegManager.Presets.Any())
    {
        <p>So you need to define a preset for FFmpeg.</p>
    }
    else
    {
        <div id="divJobList">
            @foreach (var job in jobManager.Jobs)
            {
                <JobView job="job"></JobView>

            }
        </div>
        <div id="divNewJob">
            @if (showNewJob)
            {
                <h2>New Job</h2>
                <div class="input-group">
                    <label class="col-form-label">Filter:</label>
                    <div class="">
                        <select @bind="newJob.FilterName" class="form-control">
                            <option value="">Select...</option>
                            @foreach (var c in filterManager.Filters)
                            {
                                <option value="@c.Name">@c.Name - @c.MediaSource</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Preset:</label>
                    <div class="">
                        <select @bind="newJob.PresetName" class="form-control">
                            <option value="">Select...</option>
                            @foreach (var c in FFmpegManager.Presets)
                            {
                                <option value="@c.Name">@c.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Base Folder:</label>
                    <div class="">
                        <input type="text" @bind="newJob.BaseFolder" class="form-control">
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Destination Folder:</label>
                    <div class="">
                        <input type="text" @bind="newJob.DestinationFolder" class="form-control">
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Automatically Import:</label>
                    <div class="">
                        <input type="checkbox" @bind="newJob.AutoImport" class="form-control">
                    </div>
                </div>

                <button @onclick="addJob" disabled="@(string.IsNullOrWhiteSpace(newJob.FilterName) || string.IsNullOrWhiteSpace(newJob.PresetName))">Add Job</button>
                <div class="testEvents">
                    @foreach (var e in testEvents)
                    {
                        <span class="testEvent">@e</span>
                    }
                </div>
            }
            else
            {
                <div id="divAddJobWrapper">
                    <i @onclick="() => { showNewJob = true; }" class="fas fa-plus fa-7x"></i>
                </div>
            }
        </div>
    }

}

@code {

    private string AlertMessage = null;

    //private string radarrURL { get; set; }
    //private string radarrAPIKey { get; set; }
    //private string radarrTestResponse { get; set; }
    //private bool radarrConnected { get; set; }
    //private bool showRadarrStatus { get; set; }

    //private string sonarrURL { get; set; }
    //private string sonarrAPIKey { get; set; }
    //private string sonarrTestResponse { get; set; }
    //private bool sonarrConnected { get; set; }
    //private bool showSonarrStatus { get; set; }

    private bool showNewJob;

    private Dictionary<DateTime, string> testEvents = new();

    private Compressarr.JobProcessing.Models.Job newJob = new Job();

    protected override void OnInitialized()
    {
        //if (settingsManager.HasSetting(Settings.SettingType.RadarrURL))
        //{
        //    radarrTestResponse = null;
        //    var ss = radarrService.TestConnection(settingsManager.GetSetting(Settings.SettingType.RadarrURL), settingsManager.GetSetting(Settings.SettingType.RadarrAPIKey));

        //    radarrConnected = ss.Success;

        //    radarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });
        //}

        //if (settingsManager.HasSetting(Settings.SettingType.SonarrURL))
        //{
        //    sonarrTestResponse = null;
        //    var ss = sonarrService.TestConnection(settingsManager.GetSetting(Settings.SettingType.SonarrURL), settingsManager.GetSetting(Settings.SettingType.SonarrAPIKey));

        //    sonarrConnected = ss.Success;

        //    sonarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });
        //}

        //if (!sonarrConnected && !radarrConnected)
        //{
        //    AlertMessage = "Need at least one service connected to get started.";
        //}

        base.OnInitialized();
    }

    private void addJob()
    {
        var job = new Job()
        {
            AutoImport = newJob.AutoImport,
            BaseFolder = newJob.BaseFolder,
            DestinationFolder = newJob.DestinationFolder,
            FilterName = newJob.FilterName,
            PresetName = newJob.PresetName
        };

        jobManager.CreateJobTester(job);

        job.StatusUpdate += newJobTestStatusUpdate;

        jobManager.InitialiseJob(job);

        showNewJob = false;
    }

    private void deleteSetting(Compressarr.Settings.SettingType setting)
    {
        settingsManager.DeleteSetting(setting);
    }

    private void newJobTestStatusUpdate(object caller, EventArgs args)
    {
        var jobTester = caller as JobTester;
        testEvents = jobTester.Job.Events;

        if (jobTester.Success)
        {
            jobManager.AddJob(jobTester.Job);
        }

        InvokeAsync(() => StateHasChanged());
    }

    //private void saveRadarrSettings()
    //{
    //    if (!string.IsNullOrWhiteSpace(radarrURL) && !string.IsNullOrWhiteSpace(radarrAPIKey))
    //    {
    //        radarrURL = radarrURL.TrimEnd('/');
    //        radarrTestResponse = null;
    //        var ss = radarrService.TestConnection(radarrURL, radarrAPIKey);

    //        if (ss.Success)
    //        {
    //            settingsManager.AddSetting(Settings.SettingType.RadarrURL, radarrURL);
    //            settingsManager.AddSetting(Settings.SettingType.RadarrAPIKey, radarrAPIKey);

    //            radarrConnected = ss.Success;

    //            radarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });

    //            showRadarrStatus = false;
    //        }
    //        else
    //        {
    //            radarrTestResponse = ss.ErrorMessage;
    //            showRadarrStatus = true;
    //        }
    //    }
    //}

    //private void saveSonarrSettings()
    //{
    //    if (!string.IsNullOrWhiteSpace(sonarrURL) && !string.IsNullOrWhiteSpace(sonarrAPIKey))
    //    {
    //        sonarrURL = sonarrURL.TrimEnd('/');
    //        sonarrTestResponse = null;
    //        var ss = sonarrService.TestConnection(sonarrURL, sonarrAPIKey);

    //        if (ss.Success)
    //        {
    //            settingsManager.AddSetting(Settings.SettingType.SonarrURL, sonarrURL);
    //            settingsManager.AddSetting(Settings.SettingType.SonarrAPIKey, sonarrAPIKey);

    //            sonarrConnected = ss.Success;

    //            sonarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });

    //            showSonarrStatus = false;
    //        }
    //        else
    //        {
    //            sonarrTestResponse = ss.ErrorMessage;
    //            showSonarrStatus = true;
    //        }
    //    }
    //}

    //private void toggleRadarrStatus()
    //{
    //    showRadarrStatus = !showRadarrStatus;
    //}

    //private void toggleSonarrStatus()
    //{
    //    showSonarrStatus = !showSonarrStatus;
    //}
}