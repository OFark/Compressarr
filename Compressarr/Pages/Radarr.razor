@page "/radarr"
@using Compressarr.Filtering;
@using Compressarr.Filtering.Models;
@using Compressarr.Helpers;

@inject Compressarr.Services.Interfaces.IRadarrService radarrService
@inject FilterManager filterManager
@inject IJSRuntime js

@if (!string.IsNullOrWhiteSpace(AlertMessage))
{
    <div class="alert alert-danger">@AlertMessage</div>
}
<div class="my-2 filterList">
    <table class="filterTableWrapper">
        <thead>
            <tr>
                <th class="hide">
                </th>
                <th>
                    <select @bind="filterPropertyStr" required>
                        @foreach (var fp in filterManager.FilterProperties.OrderBy(f => f.Key))
                        {
                            <option value="@fp.Value">@fp.Key</option>
                        }
                    </select>
                </th>
                <th>
                    <select @bind="filterComparitorStr" required>
                        <option value="" disabled selected hidden>is...</option>
                        @if (FilterProperty != null)
                        {
                            foreach (var fc in filterManager.GetComparitors(FilterProperty))
                            {
                                <option value="@fc.Value">@fc.Key</option>
                            }
                        }
                    </select>
                </th>
                <th colspan="2">
                    @switch (FilterProperty.PropertyType)
                    {
                        case FilterPropertyType.Boolean:
                            {
                    <select @bind="filterValue" required>
                        <option value="" disabled selected hidden>something...</option>
                        <option value="true">True</option>
                        <option value="false">False</option>
                    </select>
                            }
                            break;
                        case FilterPropertyType.DateTime:
                            {
                                <input type="Date" @bind="filterValue" placeholder="something" />
                            }
                            break;
                        case FilterPropertyType.String:
                            {
                                <input type="text" @bind="filterValue" placeholder="something" />
                            }
                            break;
                        case FilterPropertyType.Number:
                            {
                                <input type="number" @bind="filterValue" placeholder="something" />
                            }
                            break;
                        case FilterPropertyType.Enum:
                            {
                                var filterValueResults = radarrService.GetValuesForProperty(filterPropertyStr).Result;

                                if (filterValueResults.Success)
                                {
                                    <select @bind="filterValue" required>
                                        <option value="" disabled selected hidden>something...</option>
                                        @foreach (var key in filterValueResults.Results)
                                        {
                                            <option>@key</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <span>@filterValueResults.ErrorString</span>
                                }

                                break;
                            }
                    }
                </th>
                <th class="hide">
                    <button @onclick="addFilter">@newFilterTextButton</button>
                </th>

                <th class="hide" width="99%">&nbsp;</th>
                <th>
                    <select @bind="filterSelected">
                        <option value="">Filters</option>
                        @foreach (var filter in filterManager.GetFilters(MediaSource.Radarr))
                        {
                            <option value="@filter.Name">@filter.Name</option>
                        }
                    </select>
                </th>
            </tr>
        </thead>
        @foreach (var dlf in dlFilters)
        {
            <tr>
                <DLFilter filter="dlf" OnDeleteFilter="deleteFilter" OnFilterUpdate="filterUpdate" />
                <td>
                    <button @onclick="(() => groupFilter(dlf))">or</button>
                </td>
            </tr>
        }
    </table>
</div>
@if (dlFilters.Any())
{
    <div id="divFilterOptions" class="input-group">
        @if (showSaveDialog)
        {
            <input type="text" @bind="filterName" placeholder="Name it" class="form-control" />
        }
        <button @onclick="saveFilter" class="mx-1"><i class="fas fa-save"></i> Save</button>
        <button @onclick="clearFilters" class="mx-1"><i class="fas fa-ban"></i> Clear</button>
        <button @onclick="deleteSavedFilter" class="mx-1"><i class="fas fa-trash-alt"></i> Delete</button>
    </div>
}
<table class="table-responsive-sm table my-2" id="tableMovies">
    <thead>
        <tr>
           @foreach (var p in tableColumns)
            {
                <td title="@p.Key" @ondblclick="(() => filterPropertyStr = p.FilterOn)" >@p.Name</td>
            }

        </tr>
    </thead>
    <tbody>
        @if (Movies != null)
        {
            foreach (var movie in Movies)
            {
                <Movie movie="@movie" filterManager="filterManager" />
            }
        }
    </tbody>
</table>
<div class="row small">
    <div class="col-4">
    </div>
    <div class="col-4 text-center">
        <Paging pageCount="pageCount" pageNumber="pageNumber" OnFirstPage="FirstPage" OnPreviousPage="PreviousPage" OnNextPage="NextPage" OnLastPage="LastPage" />
    </div>
    <div class="col-4 text-right">
        <span>Total records: @movieCount</span>
    </div>
</div>

@code {
    private IEnumerable<Compressarr.Services.Models.Movie> Movies { get; set; }
    private int pageSize = 20;
    private int pageNumber = 0;
    private int pageCount = 0;

    private bool showFilterText = false;
    private bool showSaveDialog = false;
    private bool showingMovies = false;

    private long movieCount = 0;

    private string AlertMessage = null;

    private string filter = "";
    private string[] filterValues;

    private string newFilterTextButton = "Add";

    private string filterPropertyStr = "title";
    private string filterComparitorStr = "==";
    private string filterValue;
    private string filterName = "";
    private string filterStr = "";
    private string filterSelected
    {
        get
        {
            return filterName;
        }
        set
        {
            filterName = value;
            var filter = filterManager.GetFilter(filterName);
            if (filter != null)
            {
                dlFilters = filter.Filters.Clone();
                showSaveDialog = true;
                LoadMovies();
            }
            else
            {
                clearFilters();
            }
            FirstPage();
        }
    }

    private List<FilterProperty> tableColumns => filterManager.GetTableColumns();

    private HashSet<Compressarr.Services.Models.Movie> movies;

    private FilterProperty FilterProperty => filterManager.FilterProperties.FirstOrDefault(x => x.Value == filterPropertyStr);
    private FilterComparitor FilterComparitor => filterManager.GetComparitors(FilterProperty).FirstOrDefault(x => x.Value == filterComparitorStr);

    private List<DynamicLinqFilter> dlFilters { get; set; }

    [CascadingParameter]
    public EventCallback<bool?> ToggleBlurred { get; set; }
    [CascadingParameter]
    private ElementReference divContent { get; set; }

    protected override void OnInitialized()
    {
        dlFilters = new List<DynamicLinqFilter>();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadMovies();
        }
        else
        {
            if (showingMovies)
            {
                showingMovies = false;
                var contentScrolling = await js.InvokeAsync<bool>("eval", "content.scrollHeight > content.clientHeight");

                if (contentScrolling && pageSize > 5)
                {
                    pageSize = pageSize - 1;
                    ShowMovies();
                }
            }
        }

        StateHasChanged();
    }

    private void addFilter()
    {

        if (FilterProperty != null && FilterComparitor != null && !string.IsNullOrWhiteSpace(filterValue))
        {
            var dlFilter = new DynamicLinqFilter(FilterProperty, FilterComparitor, filterValue);

            if (dlFilters.Count == 0)
            {
                dlFilter.IsFirst = true;
            }
            else
            {
                dlFilter.LogicalOperator = "and";
            }

            dlFilters.Add(dlFilter);
            resetFilterInputs();

            LoadMovies();
        }

    }

    private void clearFilters()
    {
        dlFilters = new List<DynamicLinqFilter>();
        filterName = null;
        LoadMovies();
    }

    private void groupFilter(DynamicLinqFilter filter)
    {

        if (FilterProperty != null && FilterComparitor != null && !string.IsNullOrWhiteSpace(filterValue))
        {
            var dlFilter = new DynamicLinqFilter(FilterProperty, FilterComparitor, filterValue);
            dlFilter.LogicalOperator = "or";

            if (filter.IsGroup)
            {
                filter.SubFilters.Add(dlFilter);
            }
            else
            {
                var cloneFilter = new DynamicLinqFilter(filter.Property, filter.Comparitor, filter.Value);
                cloneFilter.IsFirst = true;

                filter.SubFilters = new List<DynamicLinqFilter>();
                filter.SubFilters.Add(cloneFilter);
                filter.SubFilters.Add(dlFilter);
                filter.Comparitor = null;
                filter.Property = null;
                filter.Value = null;
            }

            resetFilterInputs();
            LoadMovies();
        }
    }

    private void deleteFilter(DynamicLinqFilter filter)
    {
        if (dlFilters.Contains(filter))
        {
            dlFilters.Remove(filter);
            var firstFilter = dlFilters.FirstOrDefault();
            if (firstFilter != null)
            {
                firstFilter.LogicalOperator = null;
            }
        }
        else
        {
            foreach (var dlFilter in dlFilters)
            {
                if (dlFilter.SubFilters.Contains(filter))
                {
                    dlFilter.SubFilters.Remove(filter);
                    if (dlFilter.SubFilters.Count == 1)
                    {
                        dlFilter.SubFilters.First().LogicalOperator = dlFilter.LogicalOperator;
                        dlFilters.Insert(dlFilters.IndexOf(dlFilter), dlFilter.SubFilters.First());
                        dlFilters.Remove(dlFilter);
                    }
                    break;
                }
            }
        }

        LoadMovies();
    }

    private void deleteSavedFilter()
    {
        if (!string.IsNullOrWhiteSpace(filterName))
        {
            filterManager.DeleteFilter(filterName);
            filterName = null;
            showSaveDialog = false;
            clearFilters();
        }
    }

    private void saveFilter()
    {
        if (string.IsNullOrWhiteSpace(filterName))
        {
            showSaveDialog = !showSaveDialog;
        }
        else
        {
            filterManager.AddFilter(dlFilters, filterName, MediaSource.Radarr);
        }
    }

    private void resetFilterInputs()
    {
        filterPropertyStr = "title";
        filterComparitorStr = "==";
        filterValue = null;

        pageNumber = 0;
    }

    private void filterUpdate()
    {
        LoadMovies();
    }

    private async void LoadMovies()
    {
        pageSize = 20;
        toggleLoading(true);

        if (dlFilters.Any())
        {
            filter = filterManager.ConstructFilterQuery(dlFilters, out filterValues);
            var formatStr = System.Text.RegularExpressions.Regex.Replace(filter, @"@(\d)", "\"{$1}\"");
            filterStr = string.Format(formatStr, filterValues);
            newFilterTextButton = "And";
        }
        else
        {
            filter = string.Empty;
            newFilterTextButton = "Add";
        }

        Compressarr.Services.Models.ServiceResult<HashSet<Compressarr.Services.Models.Movie>> _result;


        if (string.IsNullOrWhiteSpace(filter))
        {
            _result = await radarrService.GetMovies();
        }
        else
        {
            _result = await radarrService.GetMoviesFiltered(filter, filterValues);
        }

        if (_result.Success)
        {
            movies = _result.Results;
            ShowMovies();
        }
        else
        {
            AlertMessage = _result.ErrorString;
        }

        toggleLoading(false);
    }

    private void ShowMovies()
    {
        showingMovies = true;
        movieCount = movies.Count();

        Movies = movies.Skip(pageNumber * pageSize).Take(pageSize);

        pageCount = (int)Math.Ceiling((decimal)movieCount / pageSize);
    }

    private void toggleLoading(bool? force)
    {
        if (ToggleBlurred.HasDelegate)
        {
            ToggleBlurred.InvokeAsync(force);
        }
    }

    private void FirstPage()
    {
        pageNumber = 0;
        ShowMovies();
    }

    private void PreviousPage()
    {
        pageNumber = Math.Max(0, --pageNumber);
        ShowMovies();
    }

    private void NextPage()
    {
        pageNumber = Math.Min(pageCount - 1, ++pageNumber);
        ShowMovies();
    }

    private void LastPage()
    {
        pageNumber = pageCount - 1;
        ShowMovies();
    }
}