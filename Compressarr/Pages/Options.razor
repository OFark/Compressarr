@page "/options"
@using Compressarr.FFmpegFactory;
@using Compressarr.Filtering;
@using Compressarr.JobProcessing;
@using Compressarr.Services;
@using Compressarr.Settings;
@using Newtonsoft.Json;
@using Microsoft.Extensions.Options;

@inject IFilterManager filterManager
@inject IJobManager jobManager
@inject IRadarrService radarrService
@inject IApplicationService applicationService
@inject ISonarrService sonarrService

<MudContainer MaxWidth="MaxWidth.Large">


    <MudCard Class="mb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h2">Radarr</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @if (applicationService.RadarrSettings != null && applicationService.RadarrSettings.Ok)
            {
                @if (string.IsNullOrWhiteSpace(radarrTestResponse))
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else
                {
                    <MudText>
                        Radarr: @applicationService.RadarrSettings.APIURL
                        <MudIconButton Color="@(radarrConnected ? Color.Success : Color.Error)" OnClick="toggleRadarrStatus" Icon="@(radarrConnected ? Icons.Material.Outlined.Check : Icons.Material.Outlined.Error )" />
                    </MudText>
                }

            }
            else
            {
                <MudList Dense="true">
                    <MudListItem>
                        <MudTextField @bind-Value="radarrURL" Label="Radarr URL" Immediate="true" />
                    </MudListItem>
                    <MudListItem>
                        <MudTextField @bind-Value="radarrAPIKey" Label="Radarr API key" Immediate="true" />
                    </MudListItem>
                </MudList>
            }

            @if (showRadarrStatus)
            {
                <pre>@radarrTestResponse</pre>
            }

            <DirectoryLookup @bind-Folder="radarrBasePath" Label="Base Folder" Required="false" />

        </MudCardContent>
        <MudCardActions>
            @if (applicationService.RadarrSettings?.APIURL != null)
            {
                <MudButton Color="Color.Warning" OnClick="deleteRadarrSetting" StartIcon="@Icons.Outlined.Delete">Delete</MudButton>
            }
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="saveRadarrSettings" Disabled="@(string.IsNullOrWhiteSpace(radarrURL) || string.IsNullOrWhiteSpace(radarrAPIKey))" StartIcon="@Icons.Material.Outlined.Save">Save</MudButton>
        </MudCardActions>
    </MudCard>

    <MudCard Class="mb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h2">Sonarr</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @if (applicationService.SonarrSettings != null && applicationService.SonarrSettings.Ok)
            {
                @if (string.IsNullOrWhiteSpace(sonarrTestResponse))
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                }
                else
                {
                    <MudText>
                        Sonarr: @applicationService.SonarrSettings.APIURL
                        <MudIconButton Color="@(sonarrConnected ? Color.Success : Color.Error)" OnClick="toggleSonarrStatus" Icon="@(sonarrConnected ? Icons.Material.Outlined.Check : Icons.Material.Outlined.Error )" />
                    </MudText>
                }

            }
            else
            {
                <MudList Dense="true">
                    <MudListItem>
                        <MudTextField @bind-Value="sonarrURL" Label="Sonarr URL" Immediate="true" />
                    </MudListItem>
                    <MudListItem>
                        <MudTextField @bind-Value="sonarrAPIKey" Label="Sonarr API key" Immediate="true" />
                    </MudListItem>
                </MudList>
            }

            @if (showSonarrStatus)
            {
                <pre>@sonarrTestResponse</pre>
            }

            <DirectoryLookup @bind-Folder="sonarrBasePath" Label="Base Folder" />
        </MudCardContent>
        <MudCardActions>
            @if (applicationService.SonarrSettings?.APIURL != null)
            {
                <MudButton Color="Color.Warning" OnClick="deleteSonarrSetting" StartIcon="@Icons.Outlined.Delete">Delete</MudButton>
            }
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="saveSonarrSettings" Disabled="@(string.IsNullOrWhiteSpace(sonarrURL) || string.IsNullOrWhiteSpace(sonarrAPIKey))" StartIcon="@Icons.Material.Outlined.Save">Save</MudButton>
        </MudCardActions>
    </MudCard>

    <MudCard Class="mb-4">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Settings</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudPaper Elevation="0">
                <MudSwitch Color="Color.Primary" @bind-Checked="@applicationService.AlwaysCalculateSSIM" Label="Always calculate SSIM after encoding" />
            </MudPaper>
            <MudPaper Elevation="0">
                <MudSwitch Color="Color.Primary" @bind-Checked="@applicationService.InsertNamesIntoFFmpegPreviews" Label="Insert file names into FFmpeg previews" />
            </MudPaper>
            <MudPaper Elevation="0">
                <MudSwitch Color="Color.Primary" @bind-Checked="@applicationService.LoadMediaInfoOnFilters" Label="Preload extra Media Info when filtering media." />
            </MudPaper>

            <MudSelect T="LogLevel" @bind-Value="logLevel" Label="Log Level">
                @foreach (LogLevel ll in Enum.GetValues(typeof(LogLevel)))
                {
                    <MudSelectItem Value="ll" />
                }
            </MudSelect>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" OnClick="saveSettings" StartIcon="@Icons.Outlined.Save">Save</MudButton>
        </MudCardActions>
    </MudCard>

    <MudCard>
        <MudCardContent>
            <MudList Dense="true">
                <MudListItem>Application: @System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString()</MudListItem>
                <MudListItem>Runtime: @Environment.Version.ToString()</MudListItem>
                <MudListItem>FFmpeg: @applicationService.FFmpegVersion</MudListItem>
                <MudListItem>Docker: @(AppEnvironment.InDocker ? "Yes" : "No")</MudListItem>
                <MudListItem>OS: @Environment.OSVersion.VersionString @(AppEnvironment.InNvidiaDocker ? "- Nvidia HW Support"</MudListItem>
                <MudListItem>OS 64bit: @Environment.Is64BitOperatingSystem</MudListItem>
                <MudListItem>App 64bit: @Environment.Is64BitProcess</MudListItem>
            </MudList>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string radarrURL { get; set; }
    private string radarrAPIKey { get; set; }
    private string radarrTestResponse { get; set; }
    private string radarrBasePath { get; set; }
    private bool radarrConnected { get; set; }
    private bool showRadarrStatus { get; set; }

    private string sonarrURL { get; set; }
    private string sonarrAPIKey { get; set; }
    private string sonarrTestResponse { get; set; }
    private string sonarrBasePath { get; set; }
    private bool sonarrConnected { get; set; }
    private bool showSonarrStatus { get; set; }

    private LogLevel logLevel { get; set; }

    protected async override Task OnInitializedAsync()
    {

        if (applicationService.RadarrSettings != null)
        {
            radarrTestResponse = null;
            radarrAPIKey = applicationService.RadarrSettings.APIKey;
            radarrURL = applicationService.RadarrSettings.APIURL;
            radarrBasePath = applicationService.RadarrSettings.BasePath;
            var ss = await radarrService.TestConnection(applicationService.RadarrSettings);

            radarrConnected = ss.Success;

            radarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });
        }

        if (applicationService.SonarrSettings != null)
        {
            sonarrTestResponse = null;
            sonarrAPIKey = applicationService.SonarrSettings.APIKey;
            sonarrURL = applicationService.SonarrSettings.APIURL;
            sonarrBasePath = applicationService.SonarrSettings.BasePath;

            var ss = await sonarrService.TestConnection(applicationService.SonarrSettings);

            sonarrConnected = ss.Success;

            sonarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });
        }

        logLevel = applicationService.GetLogLevel();

        _ = base.OnInitializedAsync();
    }



    private void deleteRadarrSetting()
    {
        applicationService.RadarrSettings = null;
        _ = applicationService.SaveAppSetting();
    }

    private void deleteSonarrSetting()
    {
        applicationService.SonarrSettings = null;
        _ = applicationService.SaveAppSetting();
    }

    private async void saveSettings()
    {
        await applicationService.UpdateLogLevel(logLevel);
        await applicationService.SaveAppSetting();
    }

    private async void saveRadarrSettings()
    {
        if (!string.IsNullOrWhiteSpace(radarrURL) && !string.IsNullOrWhiteSpace(radarrAPIKey))
        {
            radarrURL = radarrURL.TrimEnd('/');
            radarrTestResponse = null;
            var radarrServiceSettings = new APISettings() { APIURL = radarrURL, APIKey = radarrAPIKey, BasePath = radarrBasePath };
            var ss = await radarrService.TestConnection(radarrServiceSettings);

            if (ss.Success)
            {
                applicationService.RadarrSettings = radarrServiceSettings;

                _ = applicationService.SaveAppSetting();

                radarrConnected = ss.Success;

                radarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });

                radarrService.ClearCache();

                jobManager.InitialiseJobs(MediaSource.Radarr);

                showRadarrStatus = false;
            }
            else
            {
                radarrTestResponse = ss.ErrorMessage;
                showRadarrStatus = true;
            }
            StateHasChanged();
        }
    }

    private async void saveSonarrSettings()
    {
        if (!string.IsNullOrWhiteSpace(sonarrURL) && !string.IsNullOrWhiteSpace(sonarrAPIKey))
        {
            sonarrURL = sonarrURL.TrimEnd('/');
            sonarrTestResponse = null;
            var sonarrServiceSettings = new APISettings() { APIURL = radarrURL, APIKey = radarrAPIKey, BasePath = sonarrBasePath };
            var ss = await sonarrService.TestConnection(sonarrServiceSettings);

            if (ss.Success)
            {
                applicationService.SonarrSettings = sonarrServiceSettings;

                _ = applicationService.SaveAppSetting();

                sonarrConnected = ss.Success;

                sonarrTestResponse = JsonConvert.SerializeObject(ss, new JsonSerializerSettings() { Formatting = Formatting.Indented, NullValueHandling = NullValueHandling.Ignore });

                showSonarrStatus = false;
            }
            else
            {
                sonarrTestResponse = ss.ErrorMessage;
                showSonarrStatus = true;
            }
            StateHasChanged();
        }
    }

    private void toggleRadarrStatus()
    {
        showRadarrStatus = !showRadarrStatus;
    }

    private void toggleSonarrStatus()
    {
        showSonarrStatus = !showSonarrStatus;
    }
}
