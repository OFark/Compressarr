@using Compressarr.Filtering;
@using Compressarr.Filtering.Models;


@implements IDisposable
@inject IApplicationService applicationService
@inject IFFmpegProcessor ffmpegProcessor
@inject IHistoryService historyService


<MudTd>
    <MudIconButton Size="Size.Small" Icon="@(movie.ShowInfo ? Icons.Outlined.ArrowCircleUp : Icons.Outlined.Info)" OnClick="toggleInfo" UserAttributes="@(new() { { "title", movie.GetStableHash()}})"></MudIconButton>
    <MudIconButton Size="Size.Small" Icon="@(movie.ShowHistory ? Icons.Outlined.ArrowCircleUp : Icons.Outlined.History)" OnClick="toggleHistory"></MudIconButton>
</MudTd>



@foreach (var p in tableColumns)
{
    <MudTd DataLabel="@p.Value" @ondblclick="@(() => filterBy(p.FilterOn, p.Value))">@GetPropertyValue(movie, p.Value)@p.Suffix</MudTd>
}


@code {
    [Parameter]
    public Compressarr.Services.Models.Movie movie { get; set; }

    [Parameter]
    public IFilterManager filterManager { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, object>> OnFilterBy { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private List<FilterProperty> tableColumns => filterManager.RadarrTableColumns;

    private CancellationTokenSource cts = new CancellationTokenSource();

    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

    private bool disposedValue;

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                cts.Cancel();
                cts.Dispose();
            }
            disposedValue = true;
        }
    }

    private void filterBy(string key, string value)
    {
        if (OnFilterBy.HasDelegate)
        {
            var val = GetPropertyValue(movie, key);

            OnFilterBy.InvokeAsync(new KeyValuePair<string, object>(key, val));
        }
    }

    private async void toggleInfo()
    {
        movie.ShowInfo = !movie.ShowInfo;

        await OnUpdate.InvokeAsync();

        var response = await ffmpegProcessor.GetFFProbeInfo(movie.FilePath, cts.Token);
        if (response.Success)
        {
            movie.FFProbeMediaInfo = response.Result;
        }

        await OnUpdate.InvokeAsync();
    }

    private async void toggleHistory()
    {
        movie.ShowHistory = !movie.ShowHistory;

        if (movie.ShowHistory)
        {
            movie.MediaHistory = (await historyService.GetProcessHistoryAsync(movie.FilePath)).Select(x => x.ToTreeView()).ToHashSet();
        }

        await OnUpdate.InvokeAsync();
    }

    private object GetPropertyValue(object src, string propName)
    {
        if (src == null) return null;
        if (propName == null) throw new ArgumentException("Value cannot be null.", "propName");

        if (propName.Contains("."))//complex type nested
        {
            var temp = propName.Split(new char[] { '.' }, 2);
            return GetPropertyValue(GetPropertyValue(src, temp[0]), temp[1]);
        }
        else
        {
            var prop = src.GetType().GetProperty(propName);
            return prop != null ? prop.GetValue(src, null) : null;
        }
    }
}