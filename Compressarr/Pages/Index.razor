@page "/"
@using Compressarr.FFmpegFactory;
@using Compressarr.Filtering;
@using Compressarr.JobProcessing;
@using Compressarr.Pages.Services;
@using Compressarr.Services
@using Compressarr.Settings
@using JobProcessing.Models;

@inject IFFmpegManager FFmpegManager
@inject IFilterManager filterManager
@inject IJobManager jobManager
@inject ILayoutService layoutService
@inject IRadarrService radarrService
@inject ISonarrService sonarrService
@inject NavigationManager NavManager
@inject SettingsManager settingsManager

@if (!string.IsNullOrWhiteSpace(AlertMessage))
{
    <div class="alert alert-danger">@AlertMessage</div>
}


<h1 title="Security isn't a dirty word, Blackadder. 'Crevice' is a dirty word, but 'security' isn't.">Jobs</h1>
@{
    if (!filterManager.Filters.Any())
    {
        <p>So you need to define a filter for either Radarr, Sonarr or both.</p>
    }
    else if (!FFmpegManager.Presets.Any())
    {
        <p>So you need to define a preset for FFmpeg.</p>
    }
    else
    {
        <div id="divJobList">
            @foreach (var job in jobManager.Jobs)
            {
                <JobView job="job"></JobView>

            }
        </div>
        <div id="divNewJob">
            @if (showNewJob)
            {
                <h2>New Job</h2>
                <div class="input-group">
                    <label class="col-form-label">Filter:</label>
                    <div class="">
                        <select @bind="newJob.FilterName" class="form-control">
                            <option value="">Select...</option>
                            @foreach (var c in filterManager.Filters)
                            {
                                <option value="@c.Name">@c.Name - @c.MediaSource</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Preset:</label>
                    <div class="">
                        <select @bind="newJob.PresetName" class="form-control">
                            <option value="">Select...</option>
                            @foreach (var c in FFmpegManager.Presets)
                            {
                                <option value="@c.Name">@c.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Base Folder:</label>
                    <div class="">
                        <DirectoryLookup @bind-Folder="@newJob.BaseFolder"></DirectoryLookup>
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Destination Folder:</label>
                    <div class="">
                        <DirectoryLookup @bind-Folder="@newJob.DestinationFolder"></DirectoryLookup>
                    </div>
                </div>

                <div class="input-group">
                    <label class="col-form-label">Automatically Import:</label>
                    <div class="">
                        <input type="checkbox" @bind="newJob.AutoImport" class="form-control">
                    </div>
                </div>

                <button @onclick="addJob" disabled="@(string.IsNullOrWhiteSpace(newJob.FilterName) || string.IsNullOrWhiteSpace(newJob.PresetName))">Add Job</button>
                <div class="testEvents">
                    @foreach (var e in testEvents)
                    {
                        <span class="testEvent">@e</span>
                    }
                </div>
            }
            else
            {
                <div id="divAddJobWrapper">
                    <i @onclick="() => { showNewJob = true; }" class="fas fa-plus fa-7x"></i>
                </div>
            }
        </div>
    }

}

@code {

    private string AlertMessage = null;

    private bool showNewJob;



    private System.Collections.Concurrent.ConcurrentDictionary<DateTime, string> testEvents = new();


    private Compressarr.JobProcessing.Models.Job newJob = new Job();

    protected override void OnInitialized()
    {
        if (!settingsManager.HasSetting(Settings.SettingType.RadarrURL) && !settingsManager.HasSetting(Settings.SettingType.SonarrURL))
        {
            NavManager.NavigateTo("options");
        }

        layoutService.OnStateChanged += LayoutService_OnStateChanged;

        base.OnInitialized();
    }

    private async void LayoutService_OnStateChanged(object sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void addJob()
    {
        var job = new Job()
        {
            AutoImport = newJob.AutoImport,
            BaseFolder = newJob.BaseFolder,
            DestinationFolder = newJob.DestinationFolder,
            FilterName = newJob.FilterName,
            PresetName = newJob.PresetName
        };

        job.StatusUpdate += newJobTestStatusUpdate;

        await jobManager.InitialiseJob(job);
    }

    private async void newJobTestStatusUpdate(object caller, EventArgs args)
    {
        var job = caller as Job;
        testEvents = job.Events;

        if (job.JobStatus == JobStatus.TestedOK)
        {
            var newJob = new Job()
            {
                AutoImport = job.AutoImport,
                BaseFolder = job.BaseFolder,
                DestinationFolder = job.DestinationFolder,
                FilterName = job.FilterName,
                PresetName = job.PresetName
            };

            await jobManager.AddJob(newJob);
            job = null;
            showNewJob = false;
        }

        await InvokeAsync(() => StateHasChanged());
    }
}