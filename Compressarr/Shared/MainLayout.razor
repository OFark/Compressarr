@inherits LayoutComponentBase

@inject IApplicationInitialiser applicationInitialiser
@inject ILayoutService layoutService
@inject IApplicationService ApplicationService
@inject ISnackbar Snackbar

<MudThemeProvider Theme="@MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="2">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">
            <img src="\Logo\Compressarr.svg" style="vertical-align: middle; margin-right: 12px; width: 40px; height: auto;" />Compressarr</MudText>
        <MudAppBarSpacer />
        <NavMenu />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu>
            <MudNavLink Match="NavLinkMatch.All" Href="/">Jobs</MudNavLink>
            <MudNavLink Href="radarr">Radarr</MudNavLink>
            <MudNavLink Href="sonarr">Sonarr</MudNavLink>
            <MudNavLink Href="ffmpeg">FFmpeg</MudNavLink>
            <MudNavLink Href="options">Options</MudNavLink>
            <MudNavLink Href="https://github.com/OFark/Compressarr/wiki" Target="help">Help</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <LayoutEngine @ref="layoutEngine" OnStateChanged="LayoutEngineStateChanged">
            <MudContainer MaxWidth="MaxWidth.Large" Fixed="true" id="content">
                <CascadingValue Value=layoutEngine>
                    @if (ApplicationService.State != "Ready")
                    {
                        <MudContainer MaxWidth="MaxWidth.Small">
                            <MudPaper Class="pa-3 mb-3">
                                <MudText>@ApplicationService.State</MudText>
                                <MudProgressLinear Color="Color.Primary" Value="ApplicationService.Progress" />
                            </MudPaper>
                        </MudContainer>
                    }
                    @Body
                </CascadingValue>
            </MudContainer>
        </LayoutEngine>
    </MudMainContent>
</MudLayout>

@code {
    protected LayoutEngineBase layoutEngine = new();

    protected void LayoutEngineStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        ApplicationService.OnBroadcast += (s, message) =>
        {
            InvokeAsync(() =>
            {
                Snackbar.Add(message);
                InvokeAsync(StateHasChanged);
            });
        };

        base.OnInitialized();
}



    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            while (ApplicationService.StateHistory.TryDequeue(out var state))
            {
                Snackbar.Add(state);
            }
        }

        base.OnAfterRender(firstRender);
    }

    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.DeepPurple.Default,
            Secondary = "#89b73a",
            Tertiary = "#b7513a",
            AppbarText = "#fff",
            AppbarBackground = Colors.BlueGrey.Default
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "300px"
        },
        Typography = new Typography()
        {
            H1 = new() { FontSize = "4rem", FontFamily = new string[] { "Roboto", "Helvetica", "Arial", "sans-serif" }, FontWeight = 300, LineHeight = 1.5 }
        }
    };
}
