@page "/FFmpeg"

@inject IApplicationService ApplicationService
@inject IPresetManager PresetManager
@inject ILayoutService LayoutService

@if (appReady)
{
    <MudPaper Style="overflow:hidden; position:relative; min-height: 89vh;">
        <MudDrawerContainer Class="mud-height-full">
            <MudDrawer Open="true" Variant="@DrawerVariant.Persistent" Color="@Color.Dark" Elevation="4">
                <MudNavMenu>
                    @foreach (var p in PresetManager.Presets)
                    {
                        <MudNavLink OnClick="@(() => preset = p)"><MudText>@p.ToString()</MudText></MudNavLink>
                    }
                    <MudNavLink Icon="@Icons.Outlined.Add" OnClick="@(() => preset = new())">New Preset</MudNavLink>
                </MudNavMenu>
            </MudDrawer>
            @if (preset != null)
            {
                <PresetView Preset="preset" />
            }
        </MudDrawerContainer>
    </MudPaper>
}
else
{

    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudSkeleton Width="30%" Height="42px;" />
        <MudSkeleton Width="80%" />
        <MudSkeleton Width="100%" />
        <MudSkeleton Width="100%" />
        <MudSkeleton Width="100%" />
    </MudContainer>
}


@code {

    private FFmpegPreset preset = null;

    private bool appReady;


    protected async override Task OnInitializedAsync()
    {
        LayoutService.OnStateChanged += LayoutService_OnStateChanged;

        await ApplicationService.InitialisePresets;
        appReady = true;

        await base.OnInitializedAsync();
    }

    private void FFmpegInitialiser_OnReady(object sender, EventArgs e)
    {
        LayoutService.RaiseChange();
    }

    private async void LayoutService_OnStateChanged(object sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    private void addPreset()
    {
        preset = null;
    }
}