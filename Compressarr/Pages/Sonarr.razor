@page "/sonarr"

@using Compressarr.Filtering;
@using Compressarr.Filtering.Models;
@using Compressarr.Helpers;

<MudPaper id="divSonarr" Elevation="0">
    @if (!string.IsNullOrWhiteSpace(AlertMessage))
    {
        <MudAlert Severity="Severity.Error">@AlertMessage</MudAlert>
    }

    <MudGrid>
        <MudItem sm="4">
            @if (SeriesTreeItems != null && SeriesTreeItems.Any())
            {
                <MudTreeView ExpandOnClick="true" ServerData="LoadServerData" Items="@SeriesTreeItems" Context="series">
                    <ItemTemplate>
                        <MudTreeViewItem Value="series" Text="@series.Title" EndText="@series.Value" EndTextTypo="Typo.caption" @bind-Expanded="series.IsExpanded">
                            <Content>
                                <MudText>
                                    @if (series.TreeItems != null && series.TreeItems.Any())
                                    {
                                        if (series.IsExpanded)
                                        {
                                            <MudIcon Icon="@Icons.Outlined.KeyboardArrowDown" Style="vertical-align:middle" />
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Outlined.KeyboardArrowRight" Style="vertical-align:middle" />
                                        }
                                    }
                                    @series.Title
                                    @if (!string.IsNullOrWhiteSpace(series.Value))
                                    {
                                        <MudText Typo="Typo.caption"> - @series.Value</MudText>
                                    }

                                    @foreach (var b in series.Badges ?? new())
                                    {
                                        <MudChip Label="true" Size="Size.Small">@b</MudChip>
                                    }
                                </MudText>
                            </Content>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            }
        </MudItem>
        <MudItem sm="8">
            <MudCardActions Class="px-4">
                <MudSpacer />
                <MudButton StartIcon="@Icons.Outlined.MovieCreation" Color="Color.Secondary" Class="mt-6 mr-4" OnClick="@(() => SonarrService.GetSeriesAsync(true))">Refresh</MudButton>

                <div class="mud-input-control-input-container">
                    <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                        <select @bind="FilterID" class="mudReplacement" required>
                            @foreach (var filter in FilterManager.GetFilters(MediaSource.Sonarr))
                            {
                                <option value="@filter.ID">@filter.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </MudCardActions>

            <MudPaper Class="my-2 filterList">
                <table class="filterTableWrapper">
                    <thead valign="baseline">
                        <tr>
                            <th class="hide">
                            </th>
                            <th>
                                <div class="mud-input-control mud-input-input-control">
                                    <div class="mud-input-control-input-container">
                                        <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                                            <select @bind="FilterPropertyStr" class="mudReplacement" required>
                                                @foreach (var fp in FilterManager.SonarrFilterProperties.OrderBy(f => f.Key))
                                                {
                                                    <option value="@fp.Value">@fp.Key</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </th>
                            <th>
                                <div class="mud-input-control mud-input-input-control">
                                    <div class="mud-input-control-input-container">
                                        <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                                            <select @bind="FilterComparitorStr" class="mudReplacement" required>
                                                <option value="" disabled selected hidden>is...</option>
                                                @if (FilterProperty != null)
                                                {
                                                    foreach (var fc in FilterManager.GetComparitors(FilterProperty))
                                                    {
                                                        <option value="@fc.Value">@fc.Key</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </th>
                            <th colspan="2">
                                @switch (FilterProperty.PropertyType)
                                {
                                    case FilterPropertyType.Boolean:
                                        {
                                            <MudSelect Value="FilterValue" OffsetY="true">
                                                <MudSelectItem Value="@("True")" />
                                                <MudSelectItem Value="@("False")" />
                                            </MudSelect>
                                        }
                                        break;
                                    case FilterPropertyType.DateTime:
                                        {
                                            <MudDatePicker @bind-Text="FilterValue" placeholder="something" />
                                        }
                                        break;
                                    case FilterPropertyType.String:
                                        {
                                            <MudTextField T="string" @bind-Text="FilterValue" Placeholder="something" />

                                        }
                                        break;
                                    case FilterPropertyType.Number:
                                        {
                                            <MudNumericField T="decimal" @bind-Value="FilterIntValue" Placeholder="something" />
                                        }
                                        break;
                                    case FilterPropertyType.Enum:
                                        {
                                            var filterValueResults = SonarrService.GetValuesForPropertyAsync(FilterPropertyStr).Result;

                                            if (filterValueResults.Success)
                                            {
                                                <MudSelect @bind-Value="FilterValue" MultiSelection="true" Required="true" OffsetY="true" @bind-SelectedValues="FilterValues">
                                                    @foreach (var key in filterValueResults.Results)
                                                                    {
                                                        <MudSelectItem Value="@key" />
                                                                    }
                                                </MudSelect>
                                            }
                                            else
                                            {
                                                <MudText Color="Color.Error">@filterValueResults.ErrorString</MudText>
                                            }

                                            break;
                                        }
                                }
                            </th>
                            <th class="hide">
                                <MudButton OnClick="AddFilter" Color="Color.Primary" StartIcon="@Icons.Outlined.Add">@newFilterTextButton</MudButton>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dlf in DlFilters)
                        {
                            <tr>
                                <DLFilter filter="dlf" OnDeleteFilter="DeleteFilter" OnFilterUpdate="FilterUpdate" />
                                <td>
                                    <MudButton OnClick="(() => GroupFilter(dlf))" Color="Color.Primary" StartIcon="@Icons.Outlined.Add">or</MudButton>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </MudPaper>

            @if (DlFilters.Any())
            {
                <MudToolBar>
                    @if (showSaveDialog)
                    {
                        <MudTextField @bind-Value="FilterName" Label="Name" />
                    }
                    <MudButton OnClick="SaveFilter" Color="Color.Primary" StartIcon="@Icons.Outlined.Save">Save</MudButton>
                    <MudButton OnClick="ClearFilters" Color="Color.Warning" StartIcon="@Icons.Outlined.Clear">Clear</MudButton>
                    <MudButton OnClick="DeleteSavedFilter" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" Disabled="JobManager.FilterInUse(FilterID)">Delete</MudButton>
                    <MudSpacer></MudSpacer>
                </MudToolBar>
            }
        </MudItem>
    </MudGrid>

</MudPaper>