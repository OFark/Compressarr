@page "/radarr"

@inject IRadarrService radarrService
@inject IFilterManager filterManager
@inject IJobManager JobManager
@inject ILayoutService layoutService
@inject IDialogService DialogService
@inject IApplicationService applicationService

<MudPaper id="divRadarr" Elevation="0">
    <MudCardActions Class="px-4">
        <MudSpacer />
        <MudButton StartIcon="@Icons.Outlined.MovieCreation" Color="Color.Secondary" Class="mt-6 mr-4" OnClick="@(() => radarrService.GetMoviesAsync(true))">Refresh</MudButton>

        <div class="mud-input-control-input-container">
            <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                <select @bind="FilterID" class="mudReplacement" required>
                    @foreach (var filter in filterManager.GetFilters(MediaSource.Radarr))
                    {
                        <option value="@filter.ID">@filter.Name</option>
                    }
                </select>
            </div>
        </div>

    </MudCardActions>
    @if (!string.IsNullOrWhiteSpace(AlertMessage))
    {
        <MudAlert Severity="Severity.Error">@AlertMessage</MudAlert>
    }


    <MudPaper Class="my-2 filterList">
        <table class="filterTableWrapper">
            <thead valign="baseline">
                <tr>
                    <th class="hide">
                    </th>
                    <th>
                        <div class="mud-input-control mud-input-input-control">
                            <div class="mud-input-control-input-container">
                                <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                                    <select @bind="filterPropertyStr" class="mudReplacement" required>
                                        @foreach (var fp in filterManager.RadarrFilterProperties.OrderBy(f => f.Key))
                                        {
                                            <option value="@fp.Value">@fp.Key</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </th>
                    <th>
                        <div class="mud-input-control mud-input-input-control">
                            <div class="mud-input-control-input-container">
                                <div class="mud-input mud-input-text mud-input-underline mud-shrink">
                                    <select @bind="filterComparitorStr" class="mudReplacement" required>
                                        <option value="" disabled selected hidden>is...</option>
                                        @if (FilterProperty != null)
                                        {
                                            foreach (var fc in filterManager.GetComparitors(FilterProperty))
                                            {
                                                <option value="@fc.Value">@fc.Key</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </th>
                    <th colspan="2">
                        @switch (FilterProperty.PropertyType)
                        {
                            case FilterPropertyType.Boolean:
                                {
                                    <MudSelect Value="filterValue" OffsetY="true">
                                        <MudSelectItem Value="@("True")" />
                                        <MudSelectItem Value="@("False")" />
                                    </MudSelect>
                                }
                                break;
                            case FilterPropertyType.DateTime:
                                {
                                    <MudDatePicker @bind-Text="filterValue" placeholder="something" />
                                }
                                break;
                            case FilterPropertyType.String:
                                {
                                    <MudTextField T="string" @bind-Text="filterValue" Placeholder="something" />

                                }
                                break;
                            case FilterPropertyType.Number:
                                {
                                    <MudNumericField T="decimal" @bind-Value="FilterIntValue" Pattern=@numberRexeg Placeholder="something" />
                                }
                                break;
                            case FilterPropertyType.FileSize:
                                {
                                    <MudTextField T="string" @bind-Value="filterValue" @ref=fileSizeInput Pattern=@numberRexeg Placeholder="something" />
                                }
                                break;
                            case FilterPropertyType.Enum:
                                {
                                    var filterValueResults = radarrService.GetValuesForPropertyAsync(filterPropertyStr).Result;

                                    if (filterValueResults.Success)
                                    {
                                        <MudSelect @bind-Value="filterValue" MultiSelection="true" Required="true" @bind-SelectedValues="filterValues">
                                            @foreach (var key in filterValueResults.Results)
                                                            {
                                                <MudSelectItem Value="@key" />
                                                            }
                                        </MudSelect>
                                    }
                                    else
                                    {
                                        <MudText Color="Color.Error">@filterValueResults.ErrorString</MudText>
                                    }

                                    break;
                                }
                        }
                    </th>
                    <th class="hide">
                        <MudButton OnClick="AddFilter" Color="Color.Primary" StartIcon="@Icons.Outlined.Add">@newFilterTextButton</MudButton>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dlf in DlFilters)
                {
                    <tr>
                        <DLFilter filter="dlf" OnDeleteFilter="DeleteFilter" OnFilterUpdate="FilterUpdate" />
                        <td>
                            <MudButton OnClick="(() => GroupFilter(dlf))" Color="Color.Primary" StartIcon="@Icons.Outlined.Add">or</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </MudPaper>

    @if (DlFilters.Any())
    {
        <MudToolBar>
            @if (showSaveDialog)
            {
                <MudTextField @bind-Value="filterName" Label="Name" />
            }
            <MudButton OnClick="SaveFilter" Color="Color.Primary" StartIcon="@Icons.Outlined.Save">Save</MudButton>
            <MudButton OnClick="ClearFilters" Color="Color.Warning" StartIcon="@Icons.Outlined.Clear">Clear</MudButton>
            <MudButton OnClick="DeleteSavedFilter" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" Disabled="JobManager.FilterInUse(FilterID)">Delete</MudButton>
            <MudSpacer></MudSpacer>
        </MudToolBar>
    }
    <MudTable Items="movies" Dense="true" Striped="true" Hover="true" @ref="table">
        <HeaderContent>
            <MudTh>Info</MudTh>

            @foreach (var p in filterManager.RadarrTableColumns)
            {
                <MudTh title="@p.Key" @ondblclick="@(() => FilterOn(p.FilterOn))">@p.Name</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MovieView movie="@context" filterManager="filterManager" OnFilterBy="FilterBy" OnUpdate="@(async () => await InvokeAsync(StateHasChanged))" />
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowInfo)
            {
                <MudTr>
                    <td colspan="99">
                        @if (context.FFProbeMediaInfo != null)
                        {
                            <MudCard>
                                <MudBlazor.MudCardContent>
                                    <MudTreeView Dense="true" ExpandOnClick="true" Items="@context.FFProbeTreeView" Context="mediaInfo">
                                        <ItemTemplate>
                                            <MudTreeViewItem @bind-Expanded="@mediaInfo.IsExpanded" Items="@mediaInfo.TreeItems" Text="@($"{mediaInfo.Title.Humanize(LetterCasing.Title)}{mediaInfo.Value.Wrap(": {0}")}")" />
                                        </ItemTemplate>
                                    </MudTreeView>
                                </MudBlazor.MudCardContent>
                            </MudCard>
                        }
                        else
                        {
                            <MudText Class="pa-2">Probing file&hellip;</MudText>
                        }
                    </td>
                </MudTr>
            }
            @if (context.ShowHistory)
            {
                <MudTr>
                    <td colspan="99">
                        @if (context.MediaHistory != null)
                        {
                            <MudTreeView ExpandOnClick="true" Items="@context.MediaHistory" Context="history">
                                <ItemTemplate>
                                    <MudTreeViewItem @bind-Expanded="@history.IsExpanded" Items="@history.TreeItems" Text="@($"{history.Title}{history.Value.Wrap(": {0}")}")" />
                                </ItemTemplate>
                            </MudTreeView>
                        }
                        else
                        {
                            <MudText Class="pa-2">No history for this video</MudText>
                        }
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{5, 10, 25, 50, 100}" />
        </PagerContent>
    </MudTable>
</MudPaper>
