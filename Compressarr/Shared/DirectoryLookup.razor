@using System.IO;
@using Compressarr.Shared.Models

<MudAutocomplete T="DirectorySuggestion" Required="@Required" Label="@Label" @bind-Value="_folder" ResetValueOnEmptyText="true" SearchFunc="dirInput">
    <ItemTemplate Context="e">
        <MudText>@(e.Name)</MudText>
    </ItemTemplate>
</MudAutocomplete>

@code {

    [ParameterAttribute]
    public string Folder { get; set; }

    [ParameterAttribute]
    public string Label { get; set; }

    [ParameterAttribute]
    public bool Required { get; set; }


    private DirectorySuggestion _folder
    {
        get => new DirectorySuggestion(Folder);
        set
        {
            if (Folder == value?.Suggestion || value == null || string.IsNullOrEmpty(value.Suggestion)) return;


            Folder = value.Suggestion;
            FolderChanged.InvokeAsync(value.Suggestion);
        }
    }

    [Parameter]
    public EventCallback<string> FolderChanged { get; set; }


    private async Task<IEnumerable<DirectorySuggestion>> dirInput(string path)
    {
        var suggestions = new List<DirectorySuggestion>();
        await Task.Run(() =>
        {
            if (!string.IsNullOrEmpty(path))
            {
                try
                {
                    if (Directory.Exists(path))
                    {
                        suggestions = new DirectoryInfo(path).GetDirectories().Select(di => new DirectorySuggestion(di)).ToList();
                    }
                    else
                    {
                        var parent = Path.GetDirectoryName(path);
                        if (!string.IsNullOrEmpty(parent))
                        {
                            suggestions = new DirectoryInfo(parent).GetDirectories().Where(di => di.FullName.Contains(path, StringComparison.OrdinalIgnoreCase))
                                                                                    .Select(di => new DirectorySuggestion(di))
                                                                                    .ToList();
                        }
                        else
                        {
                            suggestions = new();
                        }
                    }
                }
                catch (Exception ex) when (
                    ex is DirectoryNotFoundException ||
                    ex is UnauthorizedAccessException)
                {
                    suggestions = new();
                }
            }
        });

        return suggestions;
    }


}