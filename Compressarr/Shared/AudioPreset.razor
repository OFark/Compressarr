@inject IPresetManager PresetManager
@inject ILayoutService LayoutService

<MudCard Class="my-2">
    <MudCardContent>
        @foreach (var fil in AudioStreamPreset.Filters)
        {
            <AudioPresetFilter AudioStreamPresetFilter="fil" Filters="AudioStreamPreset.Filters" IsFirst="@(AudioStreamPreset.Filters.IndexOf(fil) == 0)" OnUpdate="Update" OnDelete="@(() => DeleteFilter(fil))" />

        }
        @if (AudioStreamPreset.Filters.Any() && AudioStreamPreset.Filters.Last().Rule != AudioStreamRule.Any)
        {
            <MudIconButton Icon="@Icons.Outlined.Add" OnClick="@(() => AudioStreamPreset.Filters.Add(new()) )" />
        }
    <div class="gridLayout">
        <div class="gridItem">
            <MudText Style="padding-top: 1.65em">
                Then
            </MudText>
        </div>
        <div class="gridItem">
            <MudSelect T="AudioStreamAction" @bind-Value="AudioStreamPreset.Action" Label="Action">
                @foreach (AudioStreamAction r in Enum.GetValues(typeof(AudioStreamAction)))
                {
                    <MudSelectItem Value="r">@r.ToString().ToCamelCaseSplit()</MudSelectItem>
                }
            </MudSelect>
        </div>
        @switch (AudioStreamPreset.Action)
        {
            case AudioStreamAction.Clone:
            case AudioStreamAction.Encode:
                {

                    <div class="gridItem">
                        <MudSelect T="Encoder" @bind-Value="AudioStreamPreset.Encoder" Label="Encoder">
                            @foreach (var ae in PresetManager.AudioEncoders)
                            {
                                <MudSelectItem Value="ae" />
                            }
                        </MudSelect>
                    </div>
                    <div class="gridItem">
                        <MudSelect T="string" OffsetY="true" Clearable="true" @bind-Value="AudioStreamPreset.BitRate" Label="Bit Rate" Style="max-width: 7em">
                            @foreach (var b in PresetManager.AudioBitrates)
                            {
                                <MudSelectItem Value="b" />
                            }
                        </MudSelect>
                    </div>
                }
                break;
            default:
                {
                    <div></div>
                    <div></div>
                }
                break;
        }
        <div class="gridItem">
            @if (!AudioStreamPreset.CoversAny)
            {
                <MudIconButton Icon="@Icons.Outlined.ContentCopy" OnClick="copy" />
            }
        </div>
    </div>

    </MudCardContent>
</MudCard>
@code {

    [Parameter]
    public FFmpegAudioStreamPreset AudioStreamPreset { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    [Parameter]
    public EventCallback<FFmpegAudioStreamPreset> OnCopy { get; set; }

    protected override void OnInitialized()
    {
        LayoutService.OnStateChanged += (o, e) => InvokeAsync(StateHasChanged);
        base.OnInitialized();
    }

    private void DeleteFilter(FFmpegAudioStreamPresetFilter filter)
    {
        AudioStreamPreset.Filters.Remove(filter);
        InvokeAsync(StateHasChanged);
    }

    private void copy()
    {
        OnCopy.InvokeAsync(AudioStreamPreset);
    }


    private void Update()
    {
        if (AudioStreamPreset.CoversAny)
        {
            AudioStreamPreset.Filters.RemoveAll(x => x.Rule != AudioStreamRule.Any);
        }

        OnUpdate.InvokeAsync();
    }
}
