@page "/"
@using Compressarr.FFmpegFactory;
@using Compressarr.Filtering;
@using Compressarr.JobProcessing;
@using Compressarr.Pages.Services;
@using Compressarr.Services
@using Compressarr.Settings
@using JobProcessing.Models;

@inject IFFmpegManager FFmpegManager
@inject IFilterManager filterManager
@inject IJobManager jobManager
@inject ILayoutService layoutService
@inject IRadarrService radarrService
@inject ISettingsManager settingsManager
@inject ISonarrService sonarrService
@inject NavigationManager NavManager

@if (!string.IsNullOrWhiteSpace(AlertMessage))
{
    <div class="alert alert-danger">@AlertMessage</div>
}


<h1 title="Security isn't a dirty word, Blackadder. 'Crevice' is a dirty word, but 'security' isn't.">Jobs</h1>
@{
    if (!filterManager.Filters.Any())
    {
        <p>So you need to define a filter for either Radarr, Sonarr or both.</p>
    }
    else if (!FFmpegManager.Presets.Any())
    {
        <p>So you need to define a preset for FFmpeg.</p>
    }
    else
    {
        <div id="divJobList">
            @foreach (var job in jobManager.Jobs)
            {
                <JobView job="job"></JobView>

            }
            @if (showNewJob)
            {
                <JobView job="@newJob" NewJob="true" OnAdd="addJob"></JobView>
            }
            else
            {
                <div id="divAddJobWrapper">
                    <i @onclick="() => { showNewJob = true; }" class="fas fa-plus fa-7x"></i>
                </div>
            }
        </div>
    }

}

@code {

    private string AlertMessage = null;

    private bool showNewJob;

    private Compressarr.JobProcessing.Models.Job newJob = new Job();

    protected override void OnInitialized()
    {
        if (!settingsManager.HasSetting(Settings.SettingType.RadarrURL) && !settingsManager.HasSetting(Settings.SettingType.SonarrURL))
        {
            NavManager.NavigateTo("options");
        }

        layoutService.OnStateChanged += LayoutService_OnStateChanged;

        base.OnInitialized();
    }

    private async void LayoutService_OnStateChanged(object sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    private void addJob()
    {
        showNewJob = false;
        newJob = new();
        //var job = new Job()
        //{
        //    AutoImport = newJob.AutoImport,
        //    BaseFolder = newJob.BaseFolder,
        //    DestinationFolder = newJob.DestinationFolder,
        //    FilterName = newJob.FilterName,
        //    PresetName = newJob.PresetName
        //};

        //job.StatusUpdate += newJobTestStatusUpdate;

        //if(await jobManager.AddJob(job))
        //{
        //    job.StatusUpdate -= newJobTestStatusUpdate;
        //    newJob = new();
        //    showNewJob = false;
        //    await InvokeAsync(() => StateHasChanged());
        //}
    }
}